var A=Object.create;var y=Object.defineProperty;var z=Object.getOwnPropertyDescriptor;var C=Object.getOwnPropertyNames;var O=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var D=(r,e)=>{for(var t in e)y(r,t,{get:e[t],enumerable:!0})},T=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of C(e))!$.call(r,a)&&a!==t&&y(r,a,{get:()=>e[a],enumerable:!(n=z(e,a))||n.enumerable});return r};var K=(r,e,t)=>(t=r!=null?A(O(r)):{},T(e||!r||!r.__esModule?y(t,"default",{value:r,enumerable:!0}):t,r)),B=r=>T(y({},"__esModule",{value:!0}),r);var F={};D(F,{Annotation:()=>f,Interval:()=>o,MusicXML:()=>M,Solmization:()=>b,Tone:()=>l,ToneRow:()=>V,ToneRowSolmized:()=>w,Tuning:()=>h});module.exports=B(F);var g=K(require("fraction.js"),1);function k(r){return r.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function x(r,e=!1){return e?r.abs().compare(1)<0?r.inverse():r:r.abs().compare(1)>0?r.inverse():r}function I(r,e,t){let n=0,a=r.length-1;for(;n<=a;){let s=a+n>>1,i=t(e,r[s]);if(i>0)n=s+1;else if(i<0)a=s-1;else return s}return~n}function c(r,e){return(r%e+e)%e}function j(r,e){let t=1/e;return Math.round(r*t)/t}var v=K(require("fraction.js"),1),o=class r{constructor(e){this.ratio=e}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(e){return new r(this.ratio.div(e.ratio))}static fromRatio(e){return new r(new v.default(e))}static fromCents(e){return new r(new v.default(Math.pow(2,e/1200)))}static fromSavarts(e){return new r(new v.default(Math.pow(10,e/1e3)))}static compare(e,t){return e.ratio.compare(t.ratio)}static JND=r.fromCents(5)};var h=class r{constructor(e,t=[]){this.intervals=e;this.annotations=t;this.intervals.sort(o.compare),this.intervals[0].ratio.valueOf()!=1&&(this.intervals=[new o(new g.default(1)),...this.intervals])}static fromIntervals(e,t=[]){return new r(e.map(n=>typeof n=="string"?new o(new g.default(n)):o.fromCents(n)),t)}_transposable;get transposable(){if(this._transposable!==void 0)return this._transposable;let e=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every((t,n)=>{let a=t.difference(this.intervals[n]);return new o(x(a.difference(e).ratio,!0)).ratio.compare(o.JND.ratio)<0})}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(e){return new o(this.intervals[e.pitchClass].ratio.mul(this.octave.ratio.pow(e.octave)))}nearest(e){let t=Math.floor(Math.log(e.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),n=new o(e.ratio.div(this.octave.ratio.pow(t))),a=I(this.intervals,n,o.compare);if(a>=0)return{tone:new l(this,a,t),interval:e,difference:new o(new g.default(1))};{let s=~a,i=Math.abs(this.intervals[s-1].difference(n).cents),u=Math.abs(this.intervals[s].difference(n).cents),p=i<u?s-1:s,d=new l(this,p,t),E=this.tune(d);return{tone:d,interval:E,difference:E.difference(e)}}}static fromEdo(e){return new r(Array.from(Array(e+1)).map((t,n)=>o.fromCents(1200/e*n)))}},l=class r{constructor(e,t,n){this.tuning=e;this.pitchClass=t;this.octave=n}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}get tune(){return this.tuning.tune(this)}static fromPitch(e,t){return new r(e,c(t,e.steps),Math.floor(t/e.steps))}};var m=class{keyValueMap=new Map;valueKeyMap=new Map;get size(){return this.keyValueMap.size}[Symbol.toStringTag];[Symbol.iterator]=this.keyValueMap[Symbol.iterator];entries=()=>this.keyValueMap.entries();keys=()=>this.keyValueMap.keys();values=()=>this.keyValueMap.values();get=e=>this.keyValueMap.get(e);getKey=e=>this.valueKeyMap.get(e);getValue=e=>this.get(e);set=(e,t)=>{this.delete(e),this.keyValueMap.set(e,t);let n=this.valueKeyMap.get(t)||[];return this.valueKeyMap.set(t,[...n,e]),this};setKey=(e,t)=>this.set(t,e);setValue=(e,t)=>this.set(e,t);clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()};delete=e=>{if(this.has(e)){let t=this.keyValueMap.get(e);this.keyValueMap.delete(e);let n=this.valueKeyMap.get(t).filter(a=>a!==e);return n.length>0?this.valueKeyMap.set(t,n):this.valueKeyMap.delete(t),!0}return!1};deleteKey=e=>this.delete(e);deleteValue=e=>this.hasValue(e)?(this.valueKeyMap.get(e).forEach(t=>{this.delete(t)}),!0):!1;forEach=(e,t)=>{this.keyValueMap.forEach((n,a)=>{e.apply(t,[n,a,this])})};has=e=>this.keyValueMap.has(e);hasKey=e=>this.has(e);hasValue=e=>this.valueKeyMap.has(e);inspect=()=>{let e="Multimap {",t=0;return this.forEach((n,a)=>{t++,e+=""+a.toString()+" => "+n.toString(),t<this.size&&(e+=", ")}),e+="}",e}};var b=class{constructor(e,t,n){this.tuning=e;this.notes=t;this.accidentals=n;this.parseMap=new m,Object.keys(t).forEach(a=>{this.parseMap.set(a,t[a]),Object.keys(n).forEach(s=>{this.parseMap.set(`${a}${s}`,c(t[a]+n[s],e.steps))})}),this.nameMap=new m,Object.keys(t).forEach(a=>{let s=[0];this.nameMap.set(a,t[a]),Object.keys(n).forEach(i=>{s.includes(n[i])||(this.nameMap.set(`${a}${i}`,c(t[a]+n[i],e.steps)),s.push(n[i]))})}),this.regex=new RegExp("^("+Array.from(this.parseMap.keys()).map(k).join("|")+")(-?\\d)$","i")}regex;nameMap;parseMap;name(e){return[...this.nameMap.getKey(e.pitchClass)].sort((n,a)=>n.length-a.length).map(n=>`${n}${e.octave}`)}parse(e){let t=this.regex.exec(e);if(!t)throw new Error(`[Solmization.parse] Could not match note ${e}`);return new l(this.tuning,this.parseMap.get(t[1]),parseInt(t[2],10))}};var V=class r{constructor(e,t,n=[]){this.tuning=e;this.tones=t;this.annotations=n;if(t.some((a,s)=>!!t.slice(s+1).find(i=>i.pitchClass===a.pitchClass)))throw Error("Found repeating pitch class in tone row.")}transpose(e){return new r(this.tuning,this.tones.map(t=>l.fromPitch(this.tuning,e.pitch+t.pitch)))}invert(e){return new r(this.tuning,this.tones.map(t=>l.fromPitch(this.tuning,e.pitch-t.pitch)))}reverse(){return new r(this.tuning,[...this.tones].reverse())}rotate(e){let t=e%this.tones.length;return new r(this.tuning,[...this.tones.slice(t),...this.tones.slice(0,t)])}monotonize(e=!1){return new r(this.tuning,this.tones.reduce((t,n)=>{let a=t.length>0?t[t.length-1]:n;return!e&&n.pitch<a.pitch?t.push(new l(this.tuning,n.pitchClass,a.octave+(n.pitchClass<a.pitchClass?1:0))):e&&n.pitch>a.pitch?t.push(new l(this.tuning,n.pitchClass,a.octave+(n.pitchClass>a.pitchClass?-1:0))):t.push(n),t},[]))}get pitches(){return this.tones.map(e=>e.pitch)}static fromPitches(e,t,n=[]){return new r(e,t.map(a=>l.fromPitch(e,a)),n)}static fromPitchClasses(e,t,n,a=[]){return new r(e,t.map(s=>new l(e,s,n)),a)}},w=class r extends V{constructor(t,n,a,s=[]){super(t,a,s);this.tuning=t;this.solmization=n;this.tones=a;this.annotations=s}static fromToneRow(t,n){return new r(t.tuning,n,t.tones,t.annotations)}};var R=K(require("jstoxml"),1);var f=class{constructor(e,t){this.label=e;this.value=t}static findByLabel(e,t){return t.filter(n=>n.label===e).map(n=>n.value)}};var S={name:"scalextric",version:"0.5.0",description:"Like Unicode, but for music. Ish.",type:"module",types:"./build/types/index.d.ts",exports:{import:"./build/scalextric.js",require:"./build/scalextric.cjs"},scripts:{build:"npm run build:esm && npm run build:cjs && npm run build:d.ts","build:esm":"esbuild src/index.ts --bundle --format=esm --minify --sourcemap --outfile=build/scalextric.js","build:cjs":"esbuild src/index.ts --bundle --platform=node --packages=external --minify --sourcemap --outfile=build/scalextric.cjs","build:d.ts":"tsc --emitDeclarationOnly --outDir build/types",test:"npm run test:lint && npm run test:ts && npm run test:js","test:lint":"eslint src","test:ts":'tsx --tsconfig ./tsconfig.json --test test/*.spec.ts --test-name-pattern="${TEST:-.*}" ',"test:js":"node --test test/*.spec.js","build:chords":"python src/utils/chordtable/generate.py > data/chords.json && echo 'Generate data/chords.json file'","build:scala":'wget -q -O data/scales.zip http://huygens-fokker.org/docs/scales.zip && unzip -o data/scales.zip -d data/ && for f in data/scl/*; do iconv -f iso-8859-1 -t utf-8 "$f" -o "$f"; done'},author:"Karim Ratib <karim.ratib@gmail.com> (https://github.com/infojunkie)",license:"GPL-3.0-only",devDependencies:{"@eslint/js":"^9.17.0","@types/jstoxml":"^2.0.4","@types/node":"^22.10.2",esbuild:"^0.24.0",eslint:"^9.17.0","ts-node":"^10.9.2",tsx:"^4.19.2",typescript:"^5.7.2","typescript-eslint":"^8.18.1","validate-with-xmllint":"^1.2.1"},dependencies:{"fraction.js":"^4.1.2",jstoxml:"^3.2.6"}};var{toXML:P}=R.default,_="4.0",M=class r{constructor(e,t,n={}){this.title=e;this.objects=t;this.options=Object.assign({},r.defaultOptions,n),this.reference=new b(h.fromEdo(12),{C:0,D:2,E:4,F:5,G:7,A:9,B:11},{})}static defaultOptions={divisions:768,time:{beats:4,beatType:4},tempo:60};static accidentals={"#":"sharp","\u266F":"sharp","\uE262":"sharp",n:"natural","\u266E":"natural","\uE261":"natural",b:"flat","\u266D":"flat","\uE260":"flat",x:"double-sharp","\u{1D12A}":"double-sharp","\uE263":"double-sharp","##":"sharp-sharp","\u266F\u266F":"sharp-sharp","\uE269":"sharp-sharp",bb:"flat-flat","\u266D\u266D":"flat-flat","\u{1D12B}":"flat-flat","\uE264":"flat-flat","n#":"natural-sharp","\u266E\u266F":"natural-sharp","\uE268":"natural-sharp",nb:"natural-flat","\u266E\u266D":"natural-flat","\uE267":"natural-flat","#x":"triple-sharp","\u266F\u{1D12A}":"triple-sharp","\uE265":"triple-sharp",bbb:"triple-flat","\u266D\u266D\u266D":"triple-flat","\uE266":"triple-flat","\uE280":"quarter-flat","\uE282":"quarter-sharp","\uE281":"three-quarters-flat","\uE283":"three-quarters-sharp","\uE275":"sharp-down","\uE274":"sharp-up","\uE273":"natural-down","\uE272":"natural-up","\uE271":"flat-down","\uE270":"flat-up","\uE277":"double-sharp-down","\uE276":"double-sharp-up","\uE279":"flat-flat-down","\uE278":"flat-flat-up","\uE27A":"arrow-down","\uE27B":"arrow-up","\uE446":"slash-quarter-sharp","\uE447":"slash-sharp","\uE442":"slash-flat","\uE440":"double-slash-flat","\uE443":"quarter-flat","\uE444":"quarter-sharp","\uE441":"flat","\uE445":"sharp","\uE450":"sharp-1","\uE451":"sharp-2","\uE452":"sharp-3","\uE453":"sharp-5","\uE454":"flat-1","\uE455":"flat-2","\uE456":"flat-3","\uE457":"flat-4","\uE461":"sori","\uE460":"koron"};static durations={8:"eighth",4:"quarter",2:"half",1:"whole"};options;reference;convert(){return P(this.convertDocument(),{header:`
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML ${_} Partwise//EN" "http://www.musicxml.org/dtds/partwise.dtd">
      `.trim(),indent:"  "})}convertDocument(){return{_name:"score-partwise",_attrs:{version:_},_content:[{work:{"work-title":this.title}},{identification:[{encoding:[{software:`@infojunkie/scalextric ${S.version}`},{"encoding-date":r.convertDate(new Date)}]}]},{"part-list":{_name:"score-part",_attrs:{id:"P1"},_content:{_name:"part-name",_attrs:{"print-object":"no"},_content:this.title}}},{_name:"part",_attrs:{id:"P1"},_content:this.convertObjects()}]}}convertObjects(){return this.objects.reduce((e,t,n)=>{let a=this.convertMeasure(e.length+1);e.push(a),n>0&&a._content.push({_name:"print",_attrs:{"new-system":"yes"}}),n===0&&a._content.push({attributes:[{divisions:this.options.divisions},{key:[{fifths:0},{mode:"major"}]},{time:[{beats:this.options.time.beats},{"beat-type":this.options.time.beatType}]},{clef:[{sign:"G"},{line:2}]}]},{_name:"direction",_attrs:{placement:"above"},_content:[{"direction-type":[{_name:"metronome",_attrs:{parentheses:"no"},_content:[{"beat-unit":r.durations[this.options.time.beatType]},{"per-minute":this.options.tempo}]}]},{_name:"sound",_attrs:{tempo:this.options.tempo}}]});let s=f.findByLabel("label",t.annotations);s&&a._content.push({_name:"direction",_attrs:{placement:"above"},_content:[{"direction-type":[{words:s[0]}]}]});let i=0;if(t.tones.forEach((u,p)=>{a._content.push(this.convertNote(u,t)),i=(i+1)%this.options.time.beats,i===0&&p<t.tones.length-1&&(a=this.convertMeasure(e.length+1),e.push(a))}),i>0)for(;i++<this.options.time.beats;)a._content.push({_name:"note",_content:[{_name:"rest"},{duration:this.options.divisions},{type:r.durations[this.options.time.beatType]}]});return a._content.push(this.convertBar("right","light-light")),e},[])}convertBar(e,t){return{_name:"barline",_attrs:{location:e},_content:[{"bar-style":t}]}}convertMeasure(e){return{_name:"measure",_attrs:{number:e},_content:[]}}convertNote(e,t){let n=t.solmization.name(e)[0],a=n[0],s=this.convertAccidental(n.slice(1,-1)),i=n[n.length-1],u=this.reference.parse(`${a}${i}`),p=e.tune.difference(u.tune).cents,d=j(p/100,.05);return{_name:"note",_content:[{_name:"pitch",_content:[{step:a},{alter:d},{octave:i}]},{duration:this.options.divisions},{type:r.durations[this.options.time.beatType]},{...s&&s!=="other"&&{accidental:s}},{...s&&s==="other"&&{_name:"accidental",_content:s,_attrs:{smufl:n.slice(1,-1)}}}]}}convertAccidental(e){return e.length?e in r.accidentals?r.accidentals[e]:"other":null}static convertDate(e){return new Date(e.getTime()-e.getTimezoneOffset()*6e4).toISOString().split("T")[0]}};0&&(module.exports={Annotation,Interval,MusicXML,Solmization,Tone,ToneRow,ToneRowSolmized,Tuning});
//# sourceMappingURL=scalextric.cjs.map
