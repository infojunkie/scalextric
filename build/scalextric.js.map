{
  "version": 3,
  "sources": ["../node_modules/jstoxml/dist/jstoxml.js", "../node_modules/fraction.js/fraction.js", "../src/utils/helpers.ts", "../src/Interval.ts", "../src/Tuning.ts", "../src/utils/Bimap.ts", "../src/Solmization.ts", "../src/ToneRow.ts", "../src/MusicXML.ts", "../package.json"],
  "sourcesContent": ["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"exports\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.jstoxml = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = _exports.toXML = void 0;\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\n  function _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\n  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\n  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\n  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n  function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  var DATA_TYPES = {\n    ARRAY: 'array',\n    BOOLEAN: 'boolean',\n    DATE: 'date',\n    FUNCTION: 'function',\n    JSTOXML_OBJECT: 'jstoxml-object',\n    NULL: 'null',\n    NUMBER: 'number',\n    OBJECT: 'object',\n    STRING: 'string'\n  };\n  var PRIMITIVE_TYPES = [DATA_TYPES.STRING, DATA_TYPES.NUMBER, DATA_TYPES.BOOLEAN];\n  var DEFAULT_XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n  var PRIVATE_VARS = ['_selfCloseTag', '_attrs'];\n  /**\n   * Determines the indent string based on current tree depth.\n   */\n\n  var getIndentStr = function getIndentStr() {\n    var indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return indent.repeat(depth);\n  };\n  /**\n   * Sugar function supplementing JS's quirky typeof operator, plus some extra help to detect\n   * \"special objects\" expected by jstoxml.\n   * @example\n   * getType(new Date());\n   * // -> 'date'\n   */\n\n\n  var getType = function getType(val) {\n    return Array.isArray(val) && DATA_TYPES.ARRAY || _typeof(val) === DATA_TYPES.OBJECT && val !== null && val._name && DATA_TYPES.JSTOXML_OBJECT || val instanceof Date && DATA_TYPES.DATE || val === null && DATA_TYPES.NULL || _typeof(val);\n  };\n  /**\n   * Determines if a string is CDATA and shouldn't be touched.\n   * @example\n   * isCDATA('<![CDATA[<b>test</b>]]>');\n   * // -> true\n   */\n\n\n  var isCDATA = function isCDATA(str) {\n    return str.startsWith('<![CDATA[');\n  };\n  /**\n   * Replaces matching values in a string with a new value.\n   * @example\n   * mapStr('foo&bar', { '&': '&amp;' });\n   * // -> 'foo&amp;bar'\n   */\n\n\n  var mapStr = function mapStr() {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var contentMap = arguments.length > 2 ? arguments[2] : undefined;\n    var output = input;\n\n    if (_typeof(input) === DATA_TYPES.STRING) {\n      if (isCDATA(input)) {\n        return input;\n      }\n\n      var regexp = new RegExp(\"(\".concat(Object.keys(replacements).join('|'), \")(?!(\\\\w|#)*;)\"), 'g');\n      output = String(input).replace(regexp, function (str, entity) {\n        return replacements[entity] || '';\n      });\n    }\n\n    return typeof contentMap === 'function' ? contentMap(output) : output;\n  };\n  /**\n   * Maps an object or array of arribute keyval pairs to a string.\n   * @example\n   * getAttributeKeyVals({ foo: 'bar', baz: 'g' });\n   * // -> 'foo=\"bar\" baz=\"g\"'\n   * getAttributeKeyVals([ { \u26A1: true }, { foo: 'bar' } ]);\n   * // -> '\u26A1 foo=\"bar\"'\n   */\n\n\n  var getAttributeKeyVals = function getAttributeKeyVals() {\n    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var replacements = arguments.length > 1 ? arguments[1] : undefined;\n    var filter = arguments.length > 2 ? arguments[2] : undefined;\n    var outputExplicitTrue = arguments.length > 3 ? arguments[3] : undefined;\n    // Normalizes between attributes as object and as array.\n    var attributesArr = Array.isArray(attributes) ? attributes : Object.entries(attributes).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      return _defineProperty({}, key, val);\n    });\n    return attributesArr.reduce(function (allAttributes, attr) {\n      var key = Object.keys(attr)[0];\n      var val = attr[key];\n\n      if (_typeof(filter) === DATA_TYPES.FUNCTION) {\n        var shouldFilterOut = filter(key, val);\n\n        if (shouldFilterOut) {\n          return allAttributes;\n        }\n      }\n\n      var replacedVal = replacements ? mapStr(val, replacements) : val;\n      var valStr = !outputExplicitTrue && replacedVal === true ? '' : \"=\\\"\".concat(replacedVal, \"\\\"\");\n      allAttributes.push(\"\".concat(key).concat(valStr));\n      return allAttributes;\n    }, []);\n  };\n  /**\n   * Converts an attributes object/array to a string of keyval pairs.\n   * @example\n   * formatAttributes({ a: 1, b: 2 })\n   * // -> 'a=\"1\" b=\"2\"'\n   */\n\n\n  var formatAttributes = function formatAttributes() {\n    var attributes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var replacements = arguments.length > 1 ? arguments[1] : undefined;\n    var filter = arguments.length > 2 ? arguments[2] : undefined;\n    var outputExplicitTrue = arguments.length > 3 ? arguments[3] : undefined;\n    var keyVals = getAttributeKeyVals(attributes, replacements, filter, outputExplicitTrue);\n    if (keyVals.length === 0) return '';\n    var keysValsJoined = keyVals.join(' ');\n    return \" \".concat(keysValsJoined);\n  };\n  /**\n   * Converts an object into an array of jstoxml-object.\n   * @example\n   * objToArray({ foo: 'bar', baz: 2 });\n   * ->\n   * [\n   *   {\n   *     _name: 'foo',\n   *     _content: 'bar'\n   *   },\n   *   {\n   *     _name: 'baz',\n   *     _content: 2\n   *   }\n   * ]\n   */\n\n\n  var objToArray = function objToArray() {\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return Object.keys(obj).map(function (key) {\n      return {\n        _name: key,\n        _content: obj[key]\n      };\n    });\n  };\n  /**\n   * Determines if a value is a primitive JavaScript value (not including Symbol).\n   * @example\n   * isPrimitive(4);\n   * // -> true\n   */\n\n\n  var isPrimitive = function isPrimitive(val) {\n    return PRIMITIVE_TYPES.includes(getType(val));\n  };\n  /**\n   * Determines if an XML string is simple (doesn't contain nested XML data).\n   * @example\n   * isSimpleXML('<foo />');\n   * // -> false\n   */\n\n\n  var isSimpleXML = function isSimpleXML(xmlStr) {\n    return !xmlStr.match('<');\n  };\n  /**\n   * Assembles an XML header as defined by the config.\n   */\n\n\n  var getHeaderString = function getHeaderString(_ref4) {\n    var header = _ref4.header,\n        isOutputStart = _ref4.isOutputStart;\n    var shouldOutputHeader = header && isOutputStart;\n    if (!shouldOutputHeader) return '';\n    var shouldUseDefaultHeader = _typeof(header) === DATA_TYPES.BOOLEAN;\n    return shouldUseDefaultHeader ? DEFAULT_XML_HEADER : header;\n  };\n  /**\n   * Recursively traverses an object tree and converts the output to an XML string.\n   * @example\n   * toXML({ foo: 'bar' });\n   * // -> <foo>bar</foo>\n   */\n\n\n  var defaultEntityReplacements = {\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;'\n  };\n\n  var toXML = function toXML() {\n    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _config$depth = config.depth,\n        depth = _config$depth === void 0 ? 0 : _config$depth,\n        indent = config.indent,\n        _isFirstItem = config._isFirstItem,\n        _config$_isOutputStar = config._isOutputStart,\n        _isOutputStart = _config$_isOutputStar === void 0 ? true : _config$_isOutputStar,\n        header = config.header,\n        _config$attributeRepl = config.attributeReplacements,\n        rawAttributeReplacements = _config$attributeRepl === void 0 ? {} : _config$attributeRepl,\n        attributeFilter = config.attributeFilter,\n        _config$attributeExpl = config.attributeExplicitTrue,\n        attributeExplicitTrue = _config$attributeExpl === void 0 ? false : _config$attributeExpl,\n        _config$contentReplac = config.contentReplacements,\n        rawContentReplacements = _config$contentReplac === void 0 ? {} : _config$contentReplac,\n        contentMap = config.contentMap,\n        _config$selfCloseTags = config.selfCloseTags,\n        selfCloseTags = _config$selfCloseTags === void 0 ? true : _config$selfCloseTags;\n\n    var shouldTurnOffAttributeReplacements = typeof rawAttributeReplacements === 'boolean' && !rawAttributeReplacements;\n    var attributeReplacements = shouldTurnOffAttributeReplacements ? {} : _objectSpread(_objectSpread({}, defaultEntityReplacements), rawAttributeReplacements);\n    var shouldTurnOffContentReplacements = typeof rawContentReplacements === 'boolean' && !rawContentReplacements;\n    var contentReplacements = shouldTurnOffContentReplacements ? {} : _objectSpread(_objectSpread({}, defaultEntityReplacements), rawContentReplacements);\n    var shouldAddNewlines = typeof indent === 'string'; // Determines indent based on depth.\n\n    var indentStr = getIndentStr(indent, depth); // For branching based on value type.\n\n    var valType = getType(obj);\n    var headerStr = getHeaderString({\n      header: header,\n      indent: indent,\n      depth: depth,\n      isOutputStart: _isOutputStart\n    });\n    var isOutputStart = _isOutputStart && !headerStr && _isFirstItem && depth === 0;\n    var preIndentStr = shouldAddNewlines && !isOutputStart ? '\\n' : '';\n    var outputStr = '';\n\n    switch (valType) {\n      case DATA_TYPES.JSTOXML_OBJECT:\n        {\n          // Processes a specially-formatted object used by jstoxml.\n          var _name = obj._name,\n              _content = obj._content; // Output text content without a tag wrapper.\n\n          if (_content === null && typeof contentMap !== 'function') {\n            outputStr = \"\".concat(preIndentStr).concat(indentStr).concat(_name);\n            break;\n          } // Handles arrays of primitive values. (#33)\n\n\n          var isArrayOfPrimitives = Array.isArray(_content) && _content.every(isPrimitive);\n\n          if (isArrayOfPrimitives) {\n            var primitives = _content.map(function (a) {\n              return toXML({\n                _name: _name,\n                _content: a\n              }, _objectSpread(_objectSpread({}, config), {}, {\n                depth: depth,\n                _isOutputStart: false\n              }));\n            });\n\n            return primitives.join('');\n          } // Don't output private vars (such as _attrs).\n\n\n          if (PRIVATE_VARS.includes(_name)) break; // Process the nested new value and create new config.\n\n          var newVal = toXML(_content, _objectSpread(_objectSpread({}, config), {}, {\n            depth: depth + 1,\n            _isOutputStart: isOutputStart\n          }));\n          var newValType = getType(newVal);\n          var isNewValSimple = isSimpleXML(newVal);\n          var isNewValCDATA = isCDATA(newVal); // Pre-tag output (indent and line breaks).\n\n          var preTag = \"\".concat(preIndentStr).concat(indentStr); // Special handling for comments, preserving preceding line breaks/indents.\n\n          if (_name === '_comment') {\n            outputStr += \"\".concat(preTag, \"<!-- \").concat(_content, \" -->\");\n            break;\n          } // Tag output.\n\n\n          var valIsEmpty = newValType === 'undefined' || newVal === '';\n          var globalSelfClose = selfCloseTags;\n          var localSelfClose = obj._selfCloseTag;\n          var shouldSelfClose = _typeof(localSelfClose) === DATA_TYPES.BOOLEAN ? valIsEmpty && localSelfClose : valIsEmpty && globalSelfClose;\n          var selfCloseStr = shouldSelfClose ? '/' : '';\n          var attributesString = formatAttributes(obj._attrs, attributeReplacements, attributeFilter, attributeExplicitTrue);\n          var tag = \"<\".concat(_name).concat(attributesString).concat(selfCloseStr, \">\"); // Post-tag output (closing tag, indent, line breaks).\n\n          var preTagCloseStr = shouldAddNewlines && !isNewValSimple && !isNewValCDATA ? \"\\n\".concat(indentStr) : '';\n          var postTag = !shouldSelfClose ? \"\".concat(newVal).concat(preTagCloseStr, \"</\").concat(_name, \">\") : '';\n          outputStr += \"\".concat(preTag).concat(tag).concat(postTag);\n          break;\n        }\n\n      case DATA_TYPES.OBJECT:\n        {\n          // Iterates over keyval pairs in an object, converting each item to a special-object.\n          var keys = Object.keys(obj);\n          var outputArr = keys.map(function (key, index) {\n            var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n              _isFirstItem: index === 0,\n              _isLastItem: index + 1 === keys.length,\n              _isOutputStart: isOutputStart\n            });\n\n            var outputObj = {\n              _name: key\n            };\n\n            if (getType(obj[key]) === DATA_TYPES.OBJECT) {\n              // Sub-object contains an object.\n              // Move private vars up as needed.  Needed to support certain types of objects\n              // E.g. { foo: { _attrs: { a: 1 } } } -> <foo a=\"1\"/>\n              PRIVATE_VARS.forEach(function (privateVar) {\n                var val = obj[key][privateVar];\n\n                if (typeof val !== 'undefined') {\n                  outputObj[privateVar] = val;\n                  delete obj[key][privateVar];\n                }\n              });\n              var hasContent = typeof obj[key]._content !== 'undefined';\n\n              if (hasContent) {\n                // _content has sibling keys, so pass as an array (edge case).\n                // E.g. { foo: 'bar', _content: { baz: 2 } } -> <foo>bar</foo><baz>2</baz>\n                if (Object.keys(obj[key]).length > 1) {\n                  var newContentObj = Object.assign({}, obj[key]);\n                  delete newContentObj._content;\n                  outputObj._content = [].concat(_toConsumableArray(objToArray(newContentObj)), [obj[key]._content]);\n                }\n              }\n            } // Fallthrough: just pass the key as the content for the new special-object.\n\n\n            if (typeof outputObj._content === 'undefined') outputObj._content = obj[key];\n            var xml = toXML(outputObj, newConfig);\n            return xml;\n          }, config);\n          outputStr = outputArr.join('');\n          break;\n        }\n\n      case DATA_TYPES.FUNCTION:\n        {\n          // Executes a user-defined function and returns output.\n          var fnResult = obj(config);\n          outputStr = toXML(fnResult, config);\n          break;\n        }\n\n      case DATA_TYPES.ARRAY:\n        {\n          // Iterates and converts each value in an array.\n          var _outputArr = obj.map(function (singleVal, index) {\n            var newConfig = _objectSpread(_objectSpread({}, config), {}, {\n              _isFirstItem: index === 0,\n              _isLastItem: index + 1 === obj.length,\n              _isOutputStart: isOutputStart\n            });\n\n            return toXML(singleVal, newConfig);\n          });\n\n          outputStr = _outputArr.join('');\n          break;\n        }\n      // fallthrough types (number, string, boolean, date, null, etc)\n\n      default:\n        {\n          outputStr = mapStr(obj, contentReplacements, contentMap);\n          break;\n        }\n    }\n\n    return \"\".concat(headerStr).concat(outputStr);\n  };\n\n  _exports.toXML = toXML;\n  var _default = {\n    toXML: toXML\n  };\n  _exports.default = _default;\n});\n", "/**\n * @license Fraction.js v4.3.7 31/08/2023\n * https://www.xarg.org/2014/03/rational-numbers-in-javascript/\n *\n * Copyright (c) 2023, Robert Eisele (robert@raw.org)\n * Dual licensed under the MIT or GPL Version 2 licenses.\n **/\n\n\n/**\n *\n * This class offers the possibility to calculate fractions.\n * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.\n *\n * Array/Object form\n * [ 0 => <numerator>, 1 => <denominator> ]\n * [ n => <numerator>, d => <denominator> ]\n *\n * Integer form\n * - Single integer value\n *\n * Double form\n * - Single double value\n *\n * String form\n * 123.456 - a simple double\n * 123/456 - a string fraction\n * 123.'456' - a double with repeating decimal places\n * 123.(456) - synonym\n * 123.45'6' - a double with repeating last place\n * 123.45(6) - synonym\n *\n * Example:\n *\n * var f = new Fraction(\"9.4'31'\");\n * f.mul([-4, 3]).div(4.9);\n *\n */\n\n\n// Maximum search depth for cyclic rational numbers. 2000 should be more than enough.\n// Example: 1/7 = 0.(142857) has 6 repeating decimal places.\n// If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits\nvar MAX_CYCLE_LEN = 2000;\n\n// Parsed data to avoid calling \"new\" all the time\nvar P = {\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1\n};\n\nfunction assign(n, s) {\n\n  if (isNaN(n = parseInt(n, 10))) {\n    throw InvalidParameter();\n  }\n  return n * s;\n}\n\n// Creates a new Fraction internally without the need of the bulky constructor\nfunction newFraction(n, d) {\n\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n\n  var f = Object.create(Fraction.prototype);\n  f[\"s\"] = n < 0 ? -1 : 1;\n\n  n = n < 0 ? -n : n;\n\n  var a = gcd(n, d);\n\n  f[\"n\"] = n / a;\n  f[\"d\"] = d / a;\n  return f;\n}\n\nfunction factorize(num) {\n\n  var factors = {};\n\n  var n = num;\n  var i = 2;\n  var s = 4;\n\n  while (s <= n) {\n\n    while (n % i === 0) {\n      n/= i;\n      factors[i] = (factors[i] || 0) + 1;\n    }\n    s+= 1 + 2 * i++;\n  }\n\n  if (n !== num) {\n    if (n > 1)\n      factors[n] = (factors[n] || 0) + 1;\n  } else {\n    factors[num] = (factors[num] || 0) + 1;\n  }\n  return factors;\n}\n\nvar parse = function(p1, p2) {\n\n  var n = 0, d = 1, s = 1;\n  var v = 0, w = 0, x = 0, y = 1, z = 1;\n\n  var A = 0, B = 1;\n  var C = 1, D = 1;\n\n  var N = 10000000;\n  var M;\n\n  if (p1 === undefined || p1 === null) {\n    /* void */\n  } else if (p2 !== undefined) {\n    n = p1;\n    d = p2;\n    s = n * d;\n\n    if (n % 1 !== 0 || d % 1 !== 0) {\n      throw NonIntegerParameter();\n    }\n\n  } else\n    switch (typeof p1) {\n\n      case \"object\":\n        {\n          if (\"d\" in p1 && \"n\" in p1) {\n            n = p1[\"n\"];\n            d = p1[\"d\"];\n            if (\"s\" in p1)\n              n*= p1[\"s\"];\n          } else if (0 in p1) {\n            n = p1[0];\n            if (1 in p1)\n              d = p1[1];\n          } else {\n            throw InvalidParameter();\n          }\n          s = n * d;\n          break;\n        }\n      case \"number\":\n        {\n          if (p1 < 0) {\n            s = p1;\n            p1 = -p1;\n          }\n\n          if (p1 % 1 === 0) {\n            n = p1;\n          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow\n\n            if (p1 >= 1) {\n              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));\n              p1/= z;\n            }\n\n            // Using Farey Sequences\n            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/\n\n            while (B <= N && D <= N) {\n              M = (A + C) / (B + D);\n\n              if (p1 === M) {\n                if (B + D <= N) {\n                  n = A + C;\n                  d = B + D;\n                } else if (D > B) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n                break;\n\n              } else {\n\n                if (p1 > M) {\n                  A+= C;\n                  B+= D;\n                } else {\n                  C+= A;\n                  D+= B;\n                }\n\n                if (B > N) {\n                  n = C;\n                  d = D;\n                } else {\n                  n = A;\n                  d = B;\n                }\n              }\n            }\n            n*= z;\n          } else if (isNaN(p1) || isNaN(p2)) {\n            d = n = NaN;\n          }\n          break;\n        }\n      case \"string\":\n        {\n          B = p1.match(/\\d+|./g);\n\n          if (B === null)\n            throw InvalidParameter();\n\n          if (B[A] === '-') {// Check for minus sign at the beginning\n            s = -1;\n            A++;\n          } else if (B[A] === '+') {// Check for plus sign at the beginning\n            A++;\n          }\n\n          if (B.length === A + 1) { // Check if it's just a simple number \"1234\"\n            w = assign(B[A++], s);\n          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number\n\n            if (B[A] !== '.') { // Handle 0.5 and .5\n              v = assign(B[A++], s);\n            }\n            A++;\n\n            // Check for decimal places\n            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === \"'\" && B[A + 3] === \"'\") {\n              w = assign(B[A], s);\n              y = Math.pow(10, B[A].length);\n              A++;\n            }\n\n            // Check for repeating places\n            if (B[A] === '(' && B[A + 2] === ')' || B[A] === \"'\" && B[A + 2] === \"'\") {\n              x = assign(B[A + 1], s);\n              z = Math.pow(10, B[A + 1].length) - 1;\n              A+= 3;\n            }\n\n          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction \"123/456\" or \"123:456\"\n            w = assign(B[A], s);\n            y = assign(B[A + 2], 1);\n            A+= 3;\n          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction \"123 1/2\"\n            v = assign(B[A], s);\n            w = assign(B[A + 2], s);\n            y = assign(B[A + 4], 1);\n            A+= 5;\n          }\n\n          if (B.length <= A) { // Check for more tokens on the stack\n            d = y * z;\n            s = /* void */\n            n = x + d * v + z * w;\n            break;\n          }\n\n          /* Fall through on error */\n        }\n      default:\n        throw InvalidParameter();\n    }\n\n  if (d === 0) {\n    throw DivisionByZero();\n  }\n\n  P[\"s\"] = s < 0 ? -1 : 1;\n  P[\"n\"] = Math.abs(n);\n  P[\"d\"] = Math.abs(d);\n};\n\nfunction modpow(b, e, m) {\n\n  var r = 1;\n  for (; e > 0; b = (b * b) % m, e >>= 1) {\n\n    if (e & 1) {\n      r = (r * b) % m;\n    }\n  }\n  return r;\n}\n\n\nfunction cycleLen(n, d) {\n\n  for (; d % 2 === 0;\n    d/= 2) {\n  }\n\n  for (; d % 5 === 0;\n    d/= 5) {\n  }\n\n  if (d === 1) // Catch non-cyclic numbers\n    return 0;\n\n  // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:\n  // 10^(d-1) % d == 1\n  // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,\n  // as we want to translate the numbers to strings.\n\n  var rem = 10 % d;\n  var t = 1;\n\n  for (; rem !== 1; t++) {\n    rem = rem * 10 % d;\n\n    if (t > MAX_CYCLE_LEN)\n      return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`\n  }\n  return t;\n}\n\n\nfunction cycleStart(n, d, len) {\n\n  var rem1 = 1;\n  var rem2 = modpow(10, len, d);\n\n  for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)\n    // Solve 10^s == 10^(s+t) (mod d)\n\n    if (rem1 === rem2)\n      return t;\n\n    rem1 = rem1 * 10 % d;\n    rem2 = rem2 * 10 % d;\n  }\n  return 0;\n}\n\nfunction gcd(a, b) {\n\n  if (!a)\n    return b;\n  if (!b)\n    return a;\n\n  while (1) {\n    a%= b;\n    if (!a)\n      return b;\n    b%= a;\n    if (!b)\n      return a;\n  }\n};\n\n/**\n * Module constructor\n *\n * @constructor\n * @param {number|Fraction=} a\n * @param {number=} b\n */\nexport default function Fraction(a, b) {\n\n  parse(a, b);\n\n  if (this instanceof Fraction) {\n    a = gcd(P[\"d\"], P[\"n\"]); // Abuse variable a\n    this[\"s\"] = P[\"s\"];\n    this[\"n\"] = P[\"n\"] / a;\n    this[\"d\"] = P[\"d\"] / a;\n  } else {\n    return newFraction(P['s'] * P['n'], P['d']);\n  }\n}\n\nvar DivisionByZero = function() { return new Error(\"Division by Zero\"); };\nvar InvalidParameter = function() { return new Error(\"Invalid argument\"); };\nvar NonIntegerParameter = function() { return new Error(\"Parameters must be integer\"); };\n\nFraction.prototype = {\n\n  \"s\": 1,\n  \"n\": 0,\n  \"d\": 1,\n\n  /**\n   * Calculates the absolute value\n   *\n   * Ex: new Fraction(-4).abs() => 4\n   **/\n  \"abs\": function() {\n\n    return newFraction(this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Inverts the sign of the current fraction\n   *\n   * Ex: new Fraction(-4).neg() => 4\n   **/\n  \"neg\": function() {\n\n    return newFraction(-this[\"s\"] * this[\"n\"], this[\"d\"]);\n  },\n\n  /**\n   * Adds two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => 467 / 30\n   **/\n  \"add\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] + P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Subtracts two rational numbers\n   *\n   * Ex: new Fraction({n: 2, d: 3}).add(\"14.9\") => -427 / 30\n   **/\n  \"sub\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * this[\"d\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Multiplies two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").mul(3) => 5776 / 111\n   **/\n  \"mul\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"n\"],\n      this[\"d\"] * P[\"d\"]\n    );\n  },\n\n  /**\n   * Divides two rational numbers\n   *\n   * Ex: new Fraction(\"-17.(345)\").inverse().div(3)\n   **/\n  \"div\": function(a, b) {\n\n    parse(a, b);\n    return newFraction(\n      this[\"s\"] * P[\"s\"] * this[\"n\"] * P[\"d\"],\n      this[\"d\"] * P[\"n\"]\n    );\n  },\n\n  /**\n   * Clones the actual object\n   *\n   * Ex: new Fraction(\"-17.(345)\").clone()\n   **/\n  \"clone\": function() {\n    return newFraction(this['s'] * this['n'], this['d']);\n  },\n\n  /**\n   * Calculates the modulo of two rational numbers - a more precise fmod\n   *\n   * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)\n   **/\n  \"mod\": function(a, b) {\n\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return new Fraction(NaN);\n    }\n\n    if (a === undefined) {\n      return newFraction(this[\"s\"] * this[\"n\"] % this[\"d\"], 1);\n    }\n\n    parse(a, b);\n    if (0 === P[\"n\"] && 0 === this[\"d\"]) {\n      throw DivisionByZero();\n    }\n\n    /*\n     * First silly attempt, kinda slow\n     *\n     return that[\"sub\"]({\n     \"n\": num[\"n\"] * Math.floor((this.n / this.d) / (num.n / num.d)),\n     \"d\": num[\"d\"],\n     \"s\": this[\"s\"]\n     });*/\n\n    /*\n     * New attempt: a1 / b1 = a2 / b2 * q + r\n     * => b2 * a1 = a2 * b1 * q + b1 * b2 * r\n     * => (b2 * a1 % a2 * b1) / (b1 * b2)\n     */\n    return newFraction(\n      this[\"s\"] * (P[\"d\"] * this[\"n\"]) % (P[\"n\"] * this[\"d\"]),\n      P[\"d\"] * this[\"d\"]\n    );\n  },\n\n  /**\n   * Calculates the fractional gcd of two rational numbers\n   *\n   * Ex: new Fraction(5,8).gcd(3,7) => 1/56\n   */\n  \"gcd\": function(a, b) {\n\n    parse(a, b);\n\n    // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)\n\n    return newFraction(gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]), P[\"d\"] * this[\"d\"]);\n  },\n\n  /**\n   * Calculates the fractional lcm of two rational numbers\n   *\n   * Ex: new Fraction(5,8).lcm(3,7) => 15\n   */\n  \"lcm\": function(a, b) {\n\n    parse(a, b);\n\n    // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)\n\n    if (P[\"n\"] === 0 && this[\"n\"] === 0) {\n      return newFraction(0, 1);\n    }\n    return newFraction(P[\"n\"] * this[\"n\"], gcd(P[\"n\"], this[\"n\"]) * gcd(P[\"d\"], this[\"d\"]));\n  },\n\n  /**\n   * Calculates the ceil of a rational number\n   *\n   * Ex: new Fraction('4.(3)').ceil() => (5 / 1)\n   **/\n  \"ceil\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.ceil(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Calculates the floor of a rational number\n   *\n   * Ex: new Fraction('4.(3)').floor() => (4 / 1)\n   **/\n  \"floor\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.floor(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Rounds a rational number\n   *\n   * Ex: new Fraction('4.(3)').round() => (4 / 1)\n   **/\n  \"round\": function(places) {\n\n    places = Math.pow(10, places || 0);\n\n    if (isNaN(this[\"n\"]) || isNaN(this[\"d\"])) {\n      return new Fraction(NaN);\n    }\n    return newFraction(Math.round(places * this[\"s\"] * this[\"n\"] / this[\"d\"]), places);\n  },\n\n  /**\n   * Rounds a rational number to a multiple of another rational number\n   *\n   * Ex: new Fraction('0.9').roundTo(\"1/8\") => 7 / 8\n   **/\n  \"roundTo\": function(a, b) {\n\n    /*\n    k * x/y \u2264 a/b < (k+1) * x/y\n    \u21D4 k \u2264 a/b / (x/y) < (k+1)\n    \u21D4 k = floor(a/b * y/x)\n    */\n\n    parse(a, b);\n\n    return newFraction(this['s'] * Math.round(this['n'] * P['d'] / (this['d'] * P['n'])) * P['n'], P['d']);\n  },\n\n  /**\n   * Gets the inverse of the fraction, means numerator and denominator are exchanged\n   *\n   * Ex: new Fraction([-3, 4]).inverse() => -4 / 3\n   **/\n  \"inverse\": function() {\n\n    return newFraction(this[\"s\"] * this[\"d\"], this[\"n\"]);\n  },\n\n  /**\n   * Calculates the fraction to some rational exponent, if possible\n   *\n   * Ex: new Fraction(-1,2).pow(-3) => -8\n   */\n  \"pow\": function(a, b) {\n\n    parse(a, b);\n\n    // Trivial case when exp is an integer\n\n    if (P['d'] === 1) {\n\n      if (P['s'] < 0) {\n        return newFraction(Math.pow(this['s'] * this[\"d\"], P['n']), Math.pow(this[\"n\"], P['n']));\n      } else {\n        return newFraction(Math.pow(this['s'] * this[\"n\"], P['n']), Math.pow(this[\"d\"], P['n']));\n      }\n    }\n\n    // Negative roots become complex\n    //     (-a/b)^(c/d) = x\n    // <=> (-1)^(c/d) * (a/b)^(c/d) = x\n    // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180\u00B0\n    // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )\n    // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.\n    if (this['s'] < 0) return null;\n\n    // Now prime factor n and d\n    var N = factorize(this['n']);\n    var D = factorize(this['d']);\n\n    // Exponentiate and take root for n and d individually\n    var n = 1;\n    var d = 1;\n    for (var k in N) {\n      if (k === '1') continue;\n      if (k === '0') {\n        n = 0;\n        break;\n      }\n      N[k]*= P['n'];\n\n      if (N[k] % P['d'] === 0) {\n        N[k]/= P['d'];\n      } else return null;\n      n*= Math.pow(k, N[k]);\n    }\n\n    for (var k in D) {\n      if (k === '1') continue;\n      D[k]*= P['n'];\n\n      if (D[k] % P['d'] === 0) {\n        D[k]/= P['d'];\n      } else return null;\n      d*= Math.pow(k, D[k]);\n    }\n\n    if (P['s'] < 0) {\n      return newFraction(d, n);\n    }\n    return newFraction(n, d);\n  },\n\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"equals\": function(a, b) {\n\n    parse(a, b);\n    return this[\"s\"] * this[\"n\"] * P[\"d\"] === P[\"s\"] * P[\"n\"] * this[\"d\"]; // Same as compare() === 0\n  },\n\n  /**\n   * Check if two rational numbers are the same\n   *\n   * Ex: new Fraction(19.6).equals([98, 5]);\n   **/\n  \"compare\": function(a, b) {\n\n    parse(a, b);\n    var t = (this[\"s\"] * this[\"n\"] * P[\"d\"] - P[\"s\"] * P[\"n\"] * this[\"d\"]);\n    return (0 < t) - (t < 0);\n  },\n\n  \"simplify\": function(eps) {\n\n    if (isNaN(this['n']) || isNaN(this['d'])) {\n      return this;\n    }\n\n    eps = eps || 0.001;\n\n    var thisABS = this['abs']();\n    var cont = thisABS['toContinued']();\n\n    for (var i = 1; i < cont.length; i++) {\n\n      var s = newFraction(cont[i - 1], 1);\n      for (var k = i - 2; k >= 0; k--) {\n        s = s['inverse']()['add'](cont[k]);\n      }\n\n      if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {\n        return s['mul'](this['s']);\n      }\n    }\n    return this;\n  },\n\n  /**\n   * Check if two rational numbers are divisible\n   *\n   * Ex: new Fraction(19.6).divisible(1.5);\n   */\n  \"divisible\": function(a, b) {\n\n    parse(a, b);\n    return !(!(P[\"n\"] * this[\"d\"]) || ((this[\"n\"] * P[\"d\"]) % (P[\"n\"] * this[\"d\"])));\n  },\n\n  /**\n   * Returns a decimal representation of the fraction\n   *\n   * Ex: new Fraction(\"100.'91823'\").valueOf() => 100.91823918239183\n   **/\n  'valueOf': function() {\n\n    return this[\"s\"] * this[\"n\"] / this[\"d\"];\n  },\n\n  /**\n   * Returns a string-fraction representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toFraction(true) => \"4 1/3\"\n   **/\n  'toFraction': function(excludeWhole) {\n\n    var whole, str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str+= '-';\n    }\n\n    if (d === 1) {\n      str+= n;\n    } else {\n\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str+= whole;\n        str+= \" \";\n        n%= d;\n      }\n\n      str+= n;\n      str+= '/';\n      str+= d;\n    }\n    return str;\n  },\n\n  /**\n   * Returns a latex representation of a Fraction object\n   *\n   * Ex: new Fraction(\"1.'3'\").toLatex() => \"\\frac{4}{3}\"\n   **/\n  'toLatex': function(excludeWhole) {\n\n    var whole, str = \"\";\n    var n = this[\"n\"];\n    var d = this[\"d\"];\n    if (this[\"s\"] < 0) {\n      str+= '-';\n    }\n\n    if (d === 1) {\n      str+= n;\n    } else {\n\n      if (excludeWhole && (whole = Math.floor(n / d)) > 0) {\n        str+= whole;\n        n%= d;\n      }\n\n      str+= \"\\\\frac{\";\n      str+= n;\n      str+= '}{';\n      str+= d;\n      str+= '}';\n    }\n    return str;\n  },\n\n  /**\n   * Returns an array of continued fraction elements\n   *\n   * Ex: new Fraction(\"7/8\").toContinued() => [0,1,7]\n   */\n  'toContinued': function() {\n\n    var t;\n    var a = this['n'];\n    var b = this['d'];\n    var res = [];\n\n    if (isNaN(a) || isNaN(b)) {\n      return res;\n    }\n\n    do {\n      res.push(Math.floor(a / b));\n      t = a % b;\n      a = b;\n      b = t;\n    } while (a !== 1);\n\n    return res;\n  },\n\n  /**\n   * Creates a string representation of a fraction with all digits\n   *\n   * Ex: new Fraction(\"100.'91823'\").toString() => \"100.(91823)\"\n   **/\n  'toString': function(dec) {\n\n    var N = this[\"n\"];\n    var D = this[\"d\"];\n\n    if (isNaN(N) || isNaN(D)) {\n      return \"NaN\";\n    }\n\n    dec = dec || 15; // 15 = decimal places when no repetation\n\n    var cycLen = cycleLen(N, D); // Cycle length\n    var cycOff = cycleStart(N, D, cycLen); // Cycle start\n\n    var str = this['s'] < 0 ? \"-\" : \"\";\n\n    str+= N / D | 0;\n\n    N%= D;\n    N*= 10;\n\n    if (N)\n      str+= \".\";\n\n    if (cycLen) {\n\n      for (var i = cycOff; i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n      str+= \"(\";\n      for (var i = cycLen; i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n      str+= \")\";\n    } else {\n      for (var i = dec; N && i--;) {\n        str+= N / D | 0;\n        N%= D;\n        N*= 10;\n      }\n    }\n    return str;\n  }\n};\n", "import Fraction from 'fraction.js';\n\n/**\n * Escape a string to be used in regular expression.\n *\n * @param str String to escape\n * @returns escaped, RegExp-ready string\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nexport function escapeRegExp(str: string): string {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Get primes up to a given integer.\n * Uses the Sieve of Eratosthenes https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n *\n * @param max Number to reach\n * @returns all primes up to max\n * @see https://stackoverflow.com/a/12287599/209184\n */\nexport function primes(max: number): number[] {\n  const sieve: boolean[] = [], primes: number[] = [];\n  for (let i = 2; i <= max; ++i) {\n    if (!sieve[i]) {\n      // i has not been marked -- it is prime\n      primes.push(i);\n      for (let j = i << 1; j <= max; j += i) {\n        sieve[j] = true;\n      }\n    }\n  }\n  return primes;\n}\n\n/**\n * Ensure a |fraction| < 1 or > 1.\n */\nexport function flipFraction(f: Fraction, greaterThanOne = false): Fraction {\n  return greaterThanOne ?\n    (f.abs().compare(1) < 0 ? f.inverse() : f) :\n    (f.abs().compare(1) > 0 ? f.inverse() : f) ;\n}\n\n/**\n * Binary search in an array.\n *\n * @param ar Elements array that is sorted\n * @param el Target element\n * @param comp Comparison function (a,b) => n with\n *        n > 0 if a > b\n *        n < 0 if a < b\n *        n = 0 if a = b\n * @returns Index m >= 0 if match is found, m < 0 if not found with insertion point = -m-1.\n * @see https://stackoverflow.com/a/29018745/209184\n */\nexport function binarySearch<T>(ar: ReadonlyArray<T>, el: T, comp: (a: T, b: T) => number): number {\n  let m = 0;\n  let n = ar.length - 1;\n  while (m <= n) {\n    const k = (n + m) >> 1;\n    const cmp = comp(el, ar[k]);\n    if (cmp > 0) {\n      m = k + 1;\n    } else if (cmp < 0) {\n      n = k - 1;\n    } else {\n      return k;\n    }\n  }\n  return ~m;\n}\n\n/**\n * Check array equality.\n *\n * @see https://stackoverflow.com/q/7837456/209184\n */\nexport function arrayEqual<T>(ar1: ReadonlyArray<T>, ar2: ReadonlyArray<T>, comp: (a: T, b: T) => number): boolean {\n  return (\n    ar1.length === ar2.length &&\n    ar1.every((value, index) => comp(value, ar2[index]) === 0)\n  );\n}\n\n/**\n * Return array with unique values.\n *\n * @see https://stackoverflow.com/a/17903018/209184\n */\nexport function arrayUnique<T>(ar: ReadonlyArray<T>): ReadonlyArray<T> {\n  return [...new Set(ar)];\n}\n\n/**\n * Always-positive modulo function. The built-in % operator actually computes the remainder.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\n * @see https://stackoverflow.com/a/17323608/209184\n */\nexport function mod(n: number, m: number): number {\n  return ((n % m) + m) % m;\n}\n\n/**\n * Array range.\n *\n * @see https://stackoverflow.com/a/10050831/209184\n */\nexport function arrayRange(size: number, startAt = 0): ReadonlyArray<number> {\n  return [...Array(size).keys()].map(i => i + startAt);\n}\n\n/**\n * Round to nearest decimal.\n *\n * @see https://stackoverflow.com/a/27861660/209184\n */\nexport function roundTo(n: number, r: number): number {\n  const inv = 1 / r;\n  return Math.round(n * inv) / inv;\n}\n\n/**\n * Parse a string of whitespace-separated keywords, possibly including escaped quotes.\n *\n * @param list String of whitespace-separated keywords\n * @returns Array of keywords\n * @see https://stackoverflow.com/a/46946420\n */\nexport function parseList(list: string): string[] {\n  return list.match(/\\\\?.|^$/g).reduce((p, c) => {\n    if (c === '\"') {\n      p.quote = !p.quote;\n    } else if (!p.quote && c === ' ') {\n      p.a.push('');\n    } else {\n      p.a[p.a.length-1] += c.replace(/\\\\(.)/, \"$1\");\n    }\n    return  p;\n  }, {a: [''], quote: false}).a;\n}\n", "import Fraction from 'fraction.js';\n\n/**\n * INTERVALS\n *\n * The interval is the basic building block of music.\n * It is the difference in pitch between two sounds.\n *\n * It can be represented as:\n * - a frequency ratio\n * - a number of cents (1/100 of an equally tempered semitone)\n * - a number of savarts (https://en.wikipedia.org/wiki/Savart)\n * - ...and more\n *\n * It can also be named, depending on the nomenclature being used.\n *\n */\n\nexport class Interval {\n  constructor(public ratio: Fraction) {}\n  get cents(): number { return 1200 * Math.log2(this.ratio.valueOf()); }\n  get savarts(): number { return 1000 * Math.log10(this.ratio.valueOf()); }\n  difference(reference: Interval): Interval { return new Interval(this.ratio.div(reference.ratio)); }\n  static fromRatio(ratio: string): Interval { return new Interval(new Fraction(ratio)); }\n  static fromCents(cents: number): Interval { return new Interval(new Fraction(Math.pow(2, cents / 1200))); }\n  static fromSavarts(savarts: number): Interval { return new Interval(new Fraction(Math.pow(10, savarts / 1000))); }\n  static compare(a: Interval, b: Interval): number { return a.ratio.compare(b.ratio); }\n  static JND: Interval = Interval.fromCents(5); // https://en.wikipedia.org/wiki/Just-noticeable_difference\n}\n", "import Fraction from 'fraction.js';\nimport { binarySearch, flipFraction, mod } from './utils/helpers';\nimport { Interval } from './Interval';\n\n/**\n * Tuning metadata.\n */\nexport type Metadata = {\n  /**\n   * Label (name).\n   */\n  label: string,\n  /**\n   * Description.\n   */\n  description?: string,\n  /**\n   * Source in the literature.\n   */\n  source?: string,\n  /**\n   * Reference pitch in frequency space.\n   */\n  reference?: {\n    pitchClass: number,\n    octave: number,\n    frequency: number\n  }\n}\n\n/**\n * TUNING SYSTEM\n *\n * Given a reference tone and a target tone, a tuning returns the ratio between them.\n *\n * The fundamental interval is 2/1 between the base tone and its octave.\n * Other tones subdivide the octave interval. A finite number of tones N make up the tuning.\n * Tones are indexed according to their rank in the ordered sequence of ratios\n * tone 0 => ratio 1 (unison)\n * tone 1 => ratio 1.abc (first interval)\n * tone 2 => ratio 1.def (second interval)\n * ...\n * tone N-2 => ratio 1.xyz (next-to-last interval)\n * tone N-1 => ratio 2 (octave)\n *\n * Tones can extend beyond the octave\n * e.g. tone N+1 is equivalent to tone 1, but one octave higher.\n * In addition to representing a tone as above, we can represent it by its \"generator\":\n * - its pitch class pc \u2208 [0, N-1]\n * - its octave o \u2208 \u2124\n * such that t = pc(t) + N * o(t)\n */\nexport class Tuning {\n  /**\n   * CONSTRUCTOR\n   *\n   * @param intervals Tuning intervals\n   * The intervals will be _guaranteed_ to be sorted.\n   * The first interval will be _guaranteed_ to be the unison.\n   * The last interval will be _assumed_ to be the repeater (e.g. 2/1 the octave).\n   * @param metadata Tuning metadata\n   */\n  constructor(public intervals: Interval[], public metadata?: Metadata) {\n    this.intervals.sort(Interval.compare);\n    if (this.intervals[0].ratio.valueOf() != 1) {\n      this.intervals = [new Interval(new Fraction(1)), ...this.intervals];\n    }\n  }\n\n  /**\n   * Create a tuning from ratios or cents.\n   *\n   * @param intervals An array of ratios expressed as strings, or cents expressed as numbers\n   * @param metadata As per constructor\n   * @returns Tuning instance\n   */\n  static fromIntervals(intervals: (number|string)[], metadata?: Metadata): Tuning {\n    return new Tuning(intervals.map(interval => {\n      if (typeof interval == 'string') {\n        return new Interval(new Fraction(interval));\n      }\n      else {\n        return Interval.fromCents(interval);\n      }\n    }), metadata);\n  }\n\n  /**\n   * IS A TUNING TRANSPOSABLE?\n   *\n   * A tuning is fully transposable if all of its interval differences are equal.\n   * We will consider equality to be within the range of the \"just noticeable\" interval (5 cents).\n   */\n  private _transposable: boolean;\n  get transposable(): boolean {\n    if (this._transposable !== undefined) return this._transposable;\n\n    const first: Interval = this.intervals[1].difference(this.intervals[0]);\n    return (this._transposable = this.intervals.slice(1).every((v, i) => {\n      const next: Interval = v.difference(this.intervals[i]);\n      const diff: Interval = new Interval(flipFraction(next.difference(first).ratio, true));\n      return diff.ratio.compare(Interval.JND.ratio) < 0;\n    }));\n  }\n\n  /**\n   * STEPS OF A TUNING\n   *\n   * @returns Count of tones in the tuning\n   */\n  get steps(): number {\n    return this.intervals.length - 1;\n  }\n\n  /**\n   * OCTAVE OF A TUNING\n   *\n   * @returns The last interval in the tuning, which is considered to be the octave\n   */\n  get octave(): Interval {\n    return this.intervals[this.steps];\n  }\n\n  /**\n   * TUNE A TONE\n   *\n   * @param tone Tone to be tuned\n   * @returns Frequency ratio of the tone with respect to root tone\n   */\n  tune(tone: Tone): Interval {\n    // Get the ratio difference between the target tone and the root tone, raised to the difference in octave.\n    // The octave is always the last tone as per the definition of the `intervals` array.\n    return new Interval(\n      this.intervals[tone.pitchClass].ratio.mul(this.octave.ratio.pow(tone.octave))\n    );\n  }\n\n  /**\n   * NEAREST TONE\n   * Find the nearest tone given an interval and return difference\n   *\n   * @param interval Target interval\n   * @returns Nearest tone, interval and difference from the target\n   */\n  nearest(interval: Interval): {tone: Tone, interval: Interval, difference: Interval} {\n    // Bring the interval to the base octave.\n    const octave = Math.floor(Math.log(interval.ratio.valueOf()) / Math.log(this.octave.ratio.valueOf()));\n    const base = new Interval(interval.ratio.div(this.octave.ratio.pow(octave)));\n\n    // Search through the intervals to locate the nearest.\n    const n = binarySearch(this.intervals, base, Interval.compare);\n    if (n >= 0) {\n      // Exact match: return the pitch at the right octave.\n      return {\n        tone: new Tone(this, n, octave),\n        interval,\n        difference: new Interval(new Fraction(1))\n      }\n    } else {\n      // Partial match: find real nearest between insertion point and previous.\n      // We're guaranteed to find a previous value because the first value is always unison.\n      const m = ~n;\n      const lower = Math.abs(this.intervals[m-1].difference(base).cents);\n      const upper = Math.abs(this.intervals[m].difference(base).cents);\n      const nearest = lower < upper ? m-1 : m;\n      const nearestTone = new Tone(this, nearest, octave);\n      const nearestInterval = this.tune(nearestTone);\n      return {\n        tone: nearestTone,\n        interval: nearestInterval,\n        difference: nearestInterval.difference(interval)\n      }\n    }\n  }\n\n  /**\n   * EQUAL DIVISIONS OF THE OCTAVE.\n   *\n   * Generate an intervals array based on equal divisions of the octave.\n   * The intervals are calculated in cents, because they will be converted to ratios\n   * inside the Tuning constructor.\n   */\n  static fromEdo(divisions: number): Tuning {\n    return new Tuning(Array.from(Array(divisions + 1)).map((_, i) => {\n      return Interval.fromCents(1200 / divisions * i);\n    }));\n  }\n}\n\n/**\n * Tone in a tuning.\n */\nexport class Tone {\n  constructor(public tuning: Tuning, public pitchClass: number, public octave: number) {\n    // TODO Verify that pitch class is valid.\n  }\n\n  get pitch(): number {\n    return this.pitchClass + this.octave * this.tuning.steps;\n  }\n\n  get tune(): Interval {\n    return this.tuning.tune(this);\n  }\n\n  static fromPitch(tuning: Tuning, pitch: number): Tone {\n    return new Tone(tuning, mod(pitch, tuning.steps), Math.floor(pitch / tuning.steps));\n  }\n}\n", "/**\n * BIDIRECTIONAL MAP\n *\n * Adapted from https://github.com/ThomasRooney/typed-bi-directional-map\n */\nexport interface IBimap<K, V> extends Map<K, V> {\n  readonly size: number; // returns the total number of elements\n  get: (key: K) => V | undefined; // returns a specified element\n  getKey: (value: V) => K | K[] | undefined; // returns a specified element\n  getValue: (key: K) => V | undefined; // returns a specified element\n  set: (key: K, value: V) => this; // adds or updates the value of an element looked up via the specified key\n  setValue: (key: K, value: V) => this; // adds or updates the key of an element looked up via the specified value\n  setKey: (value: V, key: K) => this; // adds or updates the value of an element looked up via the specified key\n  clear: () => void; // removes all elements\n  delete: (key: K) => boolean; // Returns true if an element existed and has been removed, or false if the element does not exist.\n  deleteKey: (key: K) => boolean; // Returns true if an element existed and has been removed, or false if the element does not exist.\n  deleteValue: (value: V) => boolean; // Returns true if an element existed and has been removed, or false if the element does not exist.\n  forEach: (\n    callbackfn: (value: V, key: K, map: IBimap<K, V>) => void,\n    thisArg?: any\n  ) => void; // executes the provided callback once for each key of the map\n  has: (key: K) => boolean; // Returns true if an element with the specified key exists; otherwise false.\n  hasKey: (key: K) => boolean; // Returns true if an element with the specified key exists; otherwise false.\n  hasValue: (value: V) => boolean; // Returns true if an element with the specified value exists; otherwise false.\n  [Symbol.toStringTag]: 'Map'; // Anything implementing Map must always have toStringTag declared to be 'Map'. I consider this a little silly.\n  inspect: () => string; // A utility function to inspect current contents as a string\n}\n\n/**\n * Bimap without duplicates.\n */\nexport class Bimap<K, V> implements IBimap<K, V> {\n  protected keyValueMap: Map<K, V> = new Map<K, V>();\n  protected valueKeyMap: Map<V, K> = new Map<V, K>();\n\n  get size(): number {\n    return this.keyValueMap.size;\n  }\n\n  public [Symbol.toStringTag]: 'Map';\n  public [Symbol.iterator]: () => IterableIterator<[K, V]> = this.keyValueMap[Symbol.iterator];\n\n  public entries = (): IterableIterator<[K, V]> => this.keyValueMap.entries();\n  public keys = (): IterableIterator<K> => this.keyValueMap.keys();\n  public values = (): IterableIterator<V> => this.keyValueMap.values();\n\n  public get = (a: K): V | undefined => this.keyValueMap.get(a);\n  public getKey = (b: V): K | undefined => this.valueKeyMap.get(b);\n  public getValue = (a: K): V | undefined => this.get(a);\n  public set = (key: K, value: V): this => {\n    // Make sure no duplicates. Our conflict scenario is handled by deleting potential duplicates, in favour of the current arguments\n    this.delete(key);\n    this.deleteValue(value);\n\n    this.keyValueMap.set(key, value);\n    this.valueKeyMap.set(value, key);\n\n    return this;\n  };\n  public setKey = (value: V, key: K): this => this.set(key, value);\n  public setValue = (key: K, value: V): this => this.set(key, value);\n  public clear = (): void => {\n    this.keyValueMap.clear();\n    this.valueKeyMap.clear();\n  };\n  public delete = (key: K): boolean => {\n    if (this.has(key)) {\n      const value = this.keyValueMap.get(key) as V;\n      this.keyValueMap.delete(key);\n      this.valueKeyMap.delete(value);\n      return true;\n    }\n    return false;\n  };\n  public deleteKey = (key: K): boolean => this.delete(key);\n  public deleteValue = (value: V): boolean => {\n    if (this.hasValue(value)) {\n      return this.delete(this.valueKeyMap.get(value) as K);\n    }\n    return false;\n  };\n  public forEach = (\n    callbackfn: (value: V, key: K, map: IBimap<K, V>) => void,\n    thisArg?: any\n  ): void => {\n    this.keyValueMap.forEach((value, key) => {\n      callbackfn.apply(thisArg, [value, key, this]);\n    });\n  };\n  public has = (key: K): boolean => this.keyValueMap.has(key);\n  public hasKey = (key: K): boolean => this.has(key);\n  public hasValue = (value: V): boolean => this.valueKeyMap.has(value);\n  public inspect = (): string => {\n    let str = 'Bimap {';\n    let entry = 0;\n    this.forEach((value, key) => {\n      entry++;\n      str += '' + key.toString() + ' => ' + value.toString() + '';\n      if (entry < this.size) {\n        str += ', ';\n      }\n    });\n    str += '}';\n    return str;\n  };\n}\n\n/**\n * Bimap with multiple values per key.\n */\nexport class Multimap<K, V> implements IBimap<K, V> {\n  protected keyValueMap: Map<K, V> = new Map<K, V>();\n  protected valueKeyMap: Map<V, K[]> = new Map<V, K[]>();\n\n  get size(): number {\n    return this.keyValueMap.size;\n  }\n\n  public [Symbol.toStringTag]: 'Map';\n  public [Symbol.iterator]: () => IterableIterator<[K, V]> = this.keyValueMap[Symbol.iterator];\n\n  public entries = (): IterableIterator<[K, V]> => this.keyValueMap.entries();\n  public keys = (): IterableIterator<K> => this.keyValueMap.keys();\n  public values = (): IterableIterator<V> => this.keyValueMap.values();\n\n  public get = (a: K): V | undefined => this.keyValueMap.get(a);\n  public getKey = (b: V): K[] | undefined => this.valueKeyMap.get(b);\n  public getValue = (a: K): V | undefined => this.get(a);\n  public set = (key: K, value: V): this => {\n    this.delete(key);\n    this.keyValueMap.set(key, value);\n\n    const keys = this.valueKeyMap.get(value) || [];\n    this.valueKeyMap.set(value, [...keys, key]);\n\n    return this;\n  };\n  public setKey = (value: V, key: K): this => this.set(key, value);\n  public setValue = (key: K, value: V): this => this.set(key, value);\n  public clear = (): void => {\n    this.keyValueMap.clear();\n    this.valueKeyMap.clear();\n  };\n  public delete = (key: K): boolean => {\n    if (this.has(key)) {\n      const value = this.keyValueMap.get(key) as V;\n      this.keyValueMap.delete(key);\n      const keys = this.valueKeyMap.get(value).filter(k => k !== key);\n      if (keys.length > 0) {\n        this.valueKeyMap.set(value, keys);\n      } else {\n        this.valueKeyMap.delete(value);\n      }\n      return true;\n    }\n    return false;\n  };\n  public deleteKey = (key: K): boolean => this.delete(key);\n  public deleteValue = (value: V): boolean => {\n    if (this.hasValue(value)) {\n      this.valueKeyMap.get(value).forEach(key => { this.delete(key); });\n      return true;\n    }\n    return false;\n  };\n  public forEach = (\n    callbackfn: (value: V, key: K, map: IBimap<K, V>) => void,\n    thisArg?: any\n  ): void => {\n    this.keyValueMap.forEach((value, key) => {\n      callbackfn.apply(thisArg, [value, key, this]);\n    });\n  };\n  public has = (key: K): boolean => this.keyValueMap.has(key);\n  public hasKey = (key: K): boolean => this.has(key);\n  public hasValue = (value: V): boolean => this.valueKeyMap.has(value);\n  public inspect = (): string => {\n    let str = 'Multimap {';\n    let entry = 0;\n    this.forEach((value, key) => {\n      entry++;\n      str += '' + key.toString() + ' => ' + value.toString() + '';\n      if (entry < this.size) {\n        str += ', ';\n      }\n    });\n    str += '}';\n    return str;\n  };\n}\n", "import { Tuning, Tone } from './Tuning';\nimport { escapeRegExp, mod } from './utils/helpers';\nimport { Multimap } from './utils/Bimap';\n\n/**\n * SOLMIZATION SYSTEM\n *\n * To name notes, we use a common representation based on Scientific Pitch Notation (SPN):\n * - Standard note letters C, D, E, F, G, A, B\n * - An extensible set of accidentals\n *\n * We define a tuning notation map that defines how notes and accidentals map to tuning tones/pitches.\n */\nexport class Solmization {\n  regex: RegExp;\n  nameMap: Multimap<string, number>;\n  parseMap: Multimap<string, number>;\n\n  /**\n   * CONSTRUCTOR\n   *\n   * @param tuning Tuning being named\n   * @param notes Map of note letters to pitch classes:\n   * ```\n   * {\n   *   'C': 0,\n   *   'D': 2,\n   *   'E': 4,\n   *   'F': 5,\n   *   'G': 7,\n   *   'A': 9,\n   *   'B': 11,\n   * }\n   * @param accidentals Map of accidentals to tone steps:\n   * ```\n   * {\n   *   '\u266F': +1,\n   *   '#': +1,\n   *   '\u266D': -1,\n   *   'b': -1,\n   *   '\u266E':  0,\n   *   '\uD834\uDD2A': +2,\n   *   '\uD834\uDD2B': -2,\n   * }\n   * ```\n   */\n  constructor(\n    public tuning: Tuning,\n    public notes: {[note: string]: number},\n    public accidentals: {[accidental: string]: number}\n  ) {\n    // parseMap associates pitch classes with all possible combinations of note letters and accidentals.\n    this.parseMap = new Multimap<string, number>();\n    Object.keys(notes).forEach(note => {\n      this.parseMap.set(note, notes[note]);\n      Object.keys(accidentals).forEach(accidental => {\n        this.parseMap.set(`${note}${accidental}`, mod(notes[note] + accidentals[accidental], tuning.steps));\n      });\n    });\n\n    // nameMap associates pitch classes with a subset of combinations, by selecting the FIRST accidental symbol\n    // for each tone step.\n    this.nameMap = new Multimap<string, number>();\n    Object.keys(notes).forEach(note => {\n      const steps = [0]; // The entry below sets the natural note, i.e. step == 0\n      this.nameMap.set(note, notes[note]);\n      Object.keys(accidentals).forEach(accidental => {\n        if (!steps.includes(accidentals[accidental])) {\n          this.nameMap.set(`${note}${accidental}`, mod(notes[note] + accidentals[accidental], tuning.steps));\n          steps.push(accidentals[accidental]);\n        }\n      });\n    });\n\n    // Create a regex that parses all possible combinations.\n    this.regex = new RegExp(\n      '^(' + Array.from(this.parseMap.keys()).map(escapeRegExp).join('|') + ')' +\n      '(-?\\\\d)$',\n      'i'\n    );\n  }\n\n  /**\n   * NAME A TONE\n   *\n   * @param tone Tone to be named\n   * @returns Array of strings representing the enharmonic namings of the tone\n   */\n  name(tone: Tone): string[] {\n    const names = [...this.nameMap.getKey(tone.pitchClass)];\n    return names.sort((a, b) => a.length - b.length).map(name => `${name}${tone.octave}`);\n  }\n\n  /**\n   * PARSE A NOTE\n   *\n   * @param note Target note in scientific pitch notation\n   * @returns Corresponding tone in the tuning\n   */\n  parse(note: string): Tone {\n    const match = this.regex.exec(note);\n    if (!match) {\n      throw new Error(`[Solmization.parse] Could not match note ${note}`);\n    }\n    return new Tone(this.tuning, this.parseMap.get(match[1]), parseInt(match[2], 10));\n  }\n}\n", "import { Tuning, Tone, Metadata } from './Tuning';\nimport { Solmization } from './Solmization';\n\n/**\n * TONE ROW\n *\n * We define a tone row as an non-repetitive ordered sequence of tones. It is the basic collection of tones\n * that make up many other musical objects such as triads, scales, chords, etc.\n *\n * This definition extends the usual definition of \"tone row\" used in serial composition\n * https://en.wikipedia.org/wiki/Tone_row\n *\n * It allows us to reuse the standard tone row operations (invert, reverse, transpose, rotate)\n * on other musical objects.\n */\nexport class ToneRow {\n  /**\n   * CONSTRUCTOR\n   *\n   * @param tuning The reference tuning\n   * @param tones The tones making up the row\n   * @param metadata Row metadata (label, description, source)\n   */\n  constructor(public tuning: Tuning, public tones: Tone[], public metadata?: Metadata) {\n    // Verify that tones are valid by detecting repeating pitch classes.\n    if (tones.some((tone, index) => !!tones.slice(index + 1).find(t => t.pitchClass === tone.pitchClass))) {\n      throw Error(`Found repeating pitch class in tone row.`);\n    }\n  }\n\n  /**\n   * Transpose a row to a target tone.\n   */\n  transpose(target: Tone): ToneRow {\n    return new ToneRow(this.tuning, this.tones.map(tone =>\n      Tone.fromPitch(this.tuning, target.pitch + tone.pitch)\n    ));\n  }\n\n  /**\n   * Invert a row around an axis tone.\n   */\n  invert(axis: Tone): ToneRow {\n    return new ToneRow(this.tuning, this.tones.map(tone =>\n      Tone.fromPitch(this.tuning, axis.pitch - tone.pitch)\n    ));\n  }\n\n  /**\n   * Reverse a row.\n   */\n  reverse(): ToneRow {\n    return new ToneRow(this.tuning, [...this.tones].reverse());\n  }\n\n  /**\n   * Rotate a row by cycling it a number of times.\n   */\n  rotate(cycles: number): ToneRow {\n    const c = cycles % this.tones.length;\n    return new ToneRow(this.tuning, [...this.tones.slice(c), ...this.tones.slice(0, c)]);\n  }\n\n  /**\n   * Monotonize a row, ensuring it is stricly ascending or descending, by raising or dropping pitch octaves.\n   *\n   * rotate.monotonize => chord inversion\n   */\n  monotonize(descending = false): ToneRow {\n    return new ToneRow(this.tuning, this.tones.reduce((current, next) => {\n      const last: Tone = current.length > 0 ? current[current.length-1] : next;\n      if (!descending && next.pitch < last.pitch) {\n        current.push(new Tone(this.tuning, next.pitchClass, last.octave + (next.pitchClass < last.pitchClass ? 1 : 0)));\n      } else if (descending && next.pitch > last.pitch) {\n        current.push(new Tone(this.tuning, next.pitchClass, last.octave + (next.pitchClass > last.pitchClass ? -1 : 0)));\n      } else {\n        current.push(next);\n      }\n      return current;\n    }, []));\n  }\n\n  /**\n   * Get the pitches of the tone row.\n   */\n  get pitches(): number[] {\n    return this.tones.map(tone => tone.pitch);\n  }\n\n  /**\n   * Create a tone row from given pitches.\n   */\n  static fromPitches(tuning: Tuning, pitches: number[], metadata?: Metadata): ToneRow {\n    return new ToneRow(tuning, pitches.map(pitch =>\n      Tone.fromPitch(tuning, pitch)\n    ), metadata);\n  }\n\n  /**\n   * Create a tone row from given pitches.\n   */\n  static fromPitchClasses(tuning: Tuning, pitchClasses: number[], octave: number, metadata?: Metadata): ToneRow {\n    return new ToneRow(tuning, pitchClasses.map(pitchClass =>\n      new Tone(tuning, pitchClass, octave)\n    ), metadata);\n  }\n}\n\nexport class ToneRowSolmized extends ToneRow {\n  constructor(public tuning: Tuning, public solmization: Solmization, public tones: Tone[], public metadata?: Metadata) {\n    super(tuning, tones, metadata);\n  }\n\n  static fromToneRow(row: ToneRow, solmization: Solmization): ToneRowSolmized {\n    return new ToneRowSolmized(row.tuning, solmization, row.tones, row.metadata);\n  }\n}\n", "import jstoxml, { XmlElement } from 'jstoxml';\nconst { toXML } = jstoxml;\nimport { ToneRowSolmized } from './ToneRow';\nimport { Tuning, Tone } from './Tuning';\nimport { Solmization } from './Solmization';\nimport { roundTo } from './utils/helpers';\nimport pkg from '../package.json';\n\nconst MUSICXML_VERSION = '4.0';\n\n/**\n * Export various Scalextric objects to as a MusicXML document.\n */\nexport class MusicXML {\n  static defaultOptions = {\n    'divisions': 768,\n    'time': {\n      'beats': 4,\n      'beatType': 4\n    },\n    'tempo': 60,\n  }\n\n  static accidentals = {\n    '#': 'sharp',\n    '\u266F': 'sharp',\n    '\\uE262': 'sharp',\n\n    'n': 'natural',\n    '\u266E': 'natural',\n    '\\uE261': 'natural',\n\n    'b': 'flat',\n    '\u266D': 'flat',\n    '\\uE260': 'flat',\n\n    'x': 'double-sharp',\n    '\uD834\uDD2A': 'double-sharp',\n    '\\uE263': 'double-sharp',\n\n    '##': 'sharp-sharp',\n    '\u266F\u266F': 'sharp-sharp',\n    '\\uE269': 'sharp-sharp',\n\n    'bb': 'flat-flat',\n    '\u266D\u266D': 'flat-flat',\n    '\uD834\uDD2B': 'flat-flat',\n    '\\uE264': 'flat-flat',\n\n    'n#': 'natural-sharp',\n    '\u266E\u266F': 'natural-sharp',\n    '\\uE268': 'natural-sharp',\n\n    'nb': 'natural-flat',\n    '\u266E\u266D': 'natural-flat',\n    '\\uE267': 'natural-flat',\n\n    '#x': 'triple-sharp',\n    '\u266F\uD834\uDD2A': 'triple-sharp',\n    '\\uE265': 'triple-sharp',\n\n    'bbb': 'triple-flat',\n    '\u266D\u266D\u266D': 'triple-flat',\n    '\\uE266': 'triple-flat',\n\n    // Stein-Zimmermann accidentals (24-EDO)\n    '\\uE280': 'quarter-flat',\n    '\\uE282': 'quarter-sharp',\n    '\\uE281': 'three-quarters-flat',\n    '\\uE283': 'three-quarters-sharp',\n\n    // Gould arrow quartertone accidentals (24-EDO)\n    '\\uE275': 'sharp-down',\n    '\\uE274': 'sharp-up',\n    '\\uE273': 'natural-down',\n    '\\uE272': 'natural-up',\n    '\\uE271': 'flat-down',\n    '\\uE270': 'flat-up',\n    '\\uE277': 'double-sharp-down',\n    '\\uE276': 'double-sharp-up',\n    '\\uE279': 'flat-flat-down',\n    '\\uE278': 'flat-flat-up',\n    '\\uE27A': 'arrow-down',\n    '\\uE27B': 'arrow-up',\n\n    // Arel-Ezgi-Uzdilek (AEU) accidentals\n    '\\uE446': 'slash-quarter-sharp',\n    '\\uE447': 'slash-sharp',\n    '\\uE442': 'slash-flat',\n    '\\uE440': 'double-slash-flat',\n    '\\uE443': 'quarter-flat',\n    '\\uE444': 'quarter-sharp',\n    '\\uE441': 'flat',\n    '\\uE445': 'sharp',\n\n    // Turkish folk music accidentals\n    '\\uE450': 'sharp-1',\n    '\\uE451': 'sharp-2',\n    '\\uE452': 'sharp-3',\n    '\\uE453': 'sharp-5',\n    '\\uE454': 'flat-1',\n    '\\uE455': 'flat-2',\n    '\\uE456': 'flat-3',\n    '\\uE457': 'flat-4',\n\n    // Persian accidentals\n    '\\uE461': 'sori',\n    '\\uE460': 'koron',\n  }\n\n  static durations = {\n    8: 'eighth',\n    4: 'quarter',\n    2: 'half',\n    1: 'whole',\n  }\n\n  private options: object;\n  private reference: Solmization;\n\n  constructor(\n    private title: string,\n    private objects: ToneRowSolmized[],\n    options = {}\n  ) {\n    this.options = Object.assign({}, MusicXML.defaultOptions, options);\n    this.reference = new Solmization(Tuning.fromEdo(12), {\n      'C': 0,\n      'D': 2,\n      'E': 4,\n      'F': 5,\n      'G': 7,\n      'A': 9,\n      'B': 11,\n    }, {});\n  }\n\n  convert(): string {\n    return toXML(this.convertDocument(), {\n      header: `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML ${MUSICXML_VERSION} Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n      `.trim(),\n      indent: '  '\n    });\n  }\n\n  private convertDocument(): XmlElement {\n    return {\n      _name: 'score-partwise',\n      _attrs: { 'version': MUSICXML_VERSION },\n      _content: [{\n        'work': {\n          'work-title': this.title\n        }\n      }, {\n        'identification': [{\n          'encoding': [{\n            'software': `@infojunkie/scalextric ${pkg.version}`\n          }, {\n            'encoding-date': MusicXML.convertDate(new Date())\n          }]\n        }]\n      }, {\n        'part-list': {\n          _name: 'score-part',\n          _attrs: { 'id': 'P1' },\n          _content: {\n            _name: 'part-name',\n            _attrs: { 'print-object': 'no' },\n            _content: this.title\n          }\n        }\n      }, {\n        _name: 'part',\n        _attrs: { 'id': 'P1' },\n        _content: this.convertObjects()\n      }]\n    }\n  }\n\n  /**\n   * Convert tone rows to MusicXML measures.\n   *\n   * - Each tone row starts a new measure\n   * - Convert each tone in the tone row to a quarter-tone\n   * - Open a new measure as needed\n   * - When the tone row is complete:\n   *   - Fill the current measure with rests\n   *   - Close with a section barline\n   *   - Start a new system\n   *\n   * @returns array of measures.\n   */\n  private convertObjects(): object[] {\n    return this.objects.reduce((measures, object, index) => {\n      // Start new measure.\n      let measure = this.convertMeasure(measures.length + 1);\n      measures.push(measure);\n\n      // New system if needed.\n      if (index > 0) {\n        measure['_content'].push({\n          _name: 'print',\n          _attrs: { 'new-system': 'yes' }\n        })\n      }\n\n      // First measure attributes.\n      if (index === 0) {\n        measure['_content'].push({\n          'attributes': [{\n            'divisions': this.options['divisions']\n          }, {\n            'key': [{\n              'fifths': 0\n            }, {\n              'mode': 'major'\n            }]\n          }, {\n            'time': [{\n              'beats': this.options['time']['beats']\n            }, {\n              'beat-type': this.options['time']['beatType']\n            }]\n          }, {\n            'clef': [{\n              'sign': 'G'\n            }, {\n              'line': 2\n            }]\n          }]\n        }, {\n          _name: 'direction',\n          _attrs: { 'placement': 'above' },\n          _content: [{\n            'direction-type': [{\n              _name: 'metronome',\n              _attrs: { 'parentheses': 'no' },\n              _content: [{\n                'beat-unit': MusicXML.durations[this.options['time']['beatType']]\n              }, {\n                'per-minute': this.options['tempo']\n              }]\n            }]\n          }, {\n            _name: 'sound',\n            _attrs: { 'tempo': this.options['tempo'] }\n          }]\n        });\n      }\n\n      // Add object label if any.\n      if (object.metadata) {\n        measure['_content'].push({\n          _name: 'direction',\n          _attrs: { 'placement': 'above' },\n          _content: [{\n            'direction-type': [{\n              'words': object.metadata.label\n            }]\n          }],\n        });\n      }\n\n      // Loop on tones.\n      let beat = 0;\n      object.tones.forEach((tone, toneIndex) => {\n        measure['_content'].push(this.convertNote(tone, object));\n\n        // Add new measure if needed.\n        beat = (beat + 1) % this.options['time']['beats'];\n        if (beat === 0 && toneIndex < object.tones.length - 1) {\n          measure = this.convertMeasure(measures.length + 1);\n          measures.push(measure);\n        }\n      });\n\n      // Add remaining rests to the last measure.\n      if (beat > 0) while (beat++ < this.options['time']['beats']) {\n        measure['_content'].push({\n          _name: 'note',\n          _content: [{\n            _name: 'rest',\n          }, {\n            'duration': this.options['divisions'],\n          }, {\n            'type': MusicXML.durations[this.options['time']['beatType']],\n          }]\n        })\n      }\n\n      // Close the bar with a section barline.\n      measure['_content'].push(this.convertBar('right', 'light-light'));\n\n      return measures;\n    }, []);\n  }\n\n  private convertBar(location: string, style: string): object {\n    return {\n      _name: 'barline',\n      _attrs: { 'location': location },\n      _content: [{\n        'bar-style': style\n      }]\n    }\n  }\n\n  private convertMeasure(number: number): object {\n    return {\n      _name: 'measure',\n      _attrs: { 'number': number },\n      _content: [],\n    }\n  }\n\n  private convertNote(tone: Tone, object: ToneRowSolmized): object {\n    const name = object.solmization.name(tone)[0];\n    const step = name[0];\n    const accidental = this.convertAccidental(name.slice(1, -1));\n    const octave = name[name.length-1];\n\n    // Generate a pitch alteration as compared to the reference tuning.\n    const reference = this.reference.parse(`${step}${octave}`);\n    const cents = tone.tune.difference(reference.tune).cents;\n    const alter = roundTo(cents / 100, 0.05);\n\n    return {\n      _name: 'note',\n      _content: [{\n        _name: 'pitch',\n        _content: [{\n          'step': step\n        }, {\n          'alter': alter\n        }, {\n          'octave': octave\n        }]\n      }, {\n        'duration': this.options['divisions'],\n      }, {\n        'type': MusicXML.durations[this.options['time']['beatType']],\n      }, {\n        ...(accidental && accidental !== 'other' && { 'accidental': accidental })\n      }, {\n        ...(accidental && accidental === 'other' && {\n          _name: 'accidental',\n          _content: accidental,\n          _attrs: { 'smufl': name.slice(1, -1) }\n       })\n      }],\n    }\n  }\n\n  private convertAccidental(accidental): string {\n    if (!accidental.length) return null;\n    if (accidental in MusicXML.accidentals) {\n      return MusicXML.accidentals[accidental];\n    }\n    return 'other';\n  }\n\n  // Date in yyyy-mm-dd\n  // https://stackoverflow.com/a/50130338/209184\n  private static convertDate(date): string {\n    return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\n      .toISOString()\n      .split('T')[0];\n  }\n}\n", "{\n  \"name\": \"scalextric\",\n  \"version\": \"0.7.1\",\n  \"description\": \"Like Unicode, but for music. One day.\",\n  \"type\": \"module\",\n  \"types\": \"./build/types/index.d.ts\",\n  \"exports\": {\n    \"import\": \"./build/scalextric.js\",\n    \"require\": \"./build/scalextric.cjs\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:esm && npm run build:cjs && npm run build:d.ts\",\n    \"build:esm\": \"esbuild src/index.ts --bundle --format=esm --minify --sourcemap --outfile=build/scalextric.js\",\n    \"build:cjs\": \"esbuild src/index.ts --bundle --platform=node --packages=external --minify --sourcemap --outfile=build/scalextric.cjs\",\n    \"build:d.ts\": \"tsc --emitDeclarationOnly --outDir build/types\",\n    \"build:chords\": \"python src/utils/chordtable/generate.py > data/chords.json && echo 'Generate data/chords.json file'\",\n    \"build:scala\": \"wget -q -O data/scales.zip http://huygens-fokker.org/docs/scales.zip && unzip -o data/scales.zip -d data/ && for f in data/scl/*; do iconv -f iso-8859-1 -t utf-8 \\\"$f\\\" -o \\\"$f\\\"; done\",\n    \"test\": \"npm run test:lint && npm run test:ts && npm run test:js\",\n    \"test:lint\": \"eslint src\",\n    \"test:ts\": \"node --import=tsx --test test/*.spec.ts\",\n    \"test:js\": \"node --test test/*.spec.js\"\n  },\n  \"author\": \"Karim Ratib <karim.ratib@gmail.com> (https://github.com/infojunkie)\",\n  \"license\": \"GPL-3.0-only\",\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.17.0\",\n    \"@types/jstoxml\": \"^2.0.4\",\n    \"@types/node\": \"^22.10.2\",\n    \"esbuild\": \"^0.24.0\",\n    \"eslint\": \"^9.17.0\",\n    \"ts-node\": \"^10.9.2\",\n    \"tsx\": \"^4.19.2\",\n    \"typescript\": \"^5.7.2\",\n    \"typescript-eslint\": \"^8.18.1\",\n    \"validate-with-xmllint\": \"^1.2.1\"\n  },\n  \"dependencies\": {\n    \"fraction.js\": \"^4.1.2\",\n    \"jstoxml\": \"^3.2.6\"\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_jstoxml", "__commonJSMin", "exports", "global", "factory", "mod", "_exports", "_toConsumableArray", "arr", "_arrayWithoutHoles", "_iterableToArray", "_unsupportedIterableToArray", "_nonIterableSpread", "iter", "_arrayLikeToArray", "ownKeys", "object", "enumerableOnly", "keys", "symbols", "sym", "_objectSpread", "target", "i", "source", "key", "_defineProperty", "obj", "value", "_slicedToArray", "_arrayWithHoles", "_iterableToArrayLimit", "_nonIterableRest", "minLen", "n", "len", "arr2", "_i", "_arr", "_n", "_d", "_s", "_e", "err", "_typeof", "DATA_TYPES", "PRIMITIVE_TYPES", "DEFAULT_XML_HEADER", "PRIVATE_VARS", "getIndentStr", "indent", "depth", "getType", "val", "isCDATA", "str", "mapStr", "input", "replacements", "contentMap", "output", "regexp", "entity", "getAttributeKeyVals", "attributes", "filter", "outputExplicitTrue", "attributesArr", "_ref", "_ref2", "allAttributes", "attr", "shouldFilterOut", "replacedVal", "valStr", "formatAttributes", "keyVals", "keysValsJoined", "objToArray", "isPrimitive", "isSimpleXML", "xmlStr", "getHeaderString", "_ref4", "header", "isOutputStart", "shouldOutputHeader", "shouldUseDefaultHeader", "defaultEntityReplacements", "toXML", "config", "_config$depth", "_isFirstItem", "_config$_isOutputStar", "_isOutputStart", "_config$attributeRepl", "rawAttributeReplacements", "attributeFilter", "_config$attributeExpl", "attributeExplicitTrue", "_config$contentReplac", "rawContentReplacements", "_config$selfCloseTags", "selfCloseTags", "shouldTurnOffAttributeReplacements", "attributeReplacements", "shouldTurnOffContentReplacements", "contentReplacements", "shouldAddNewlines", "indentStr", "valType", "headerStr", "preIndentStr", "outputStr", "_name", "_content", "isArrayOfPrimitives", "primitives", "a", "newVal", "newValType", "isNewValSimple", "isNewValCDATA", "preTag", "valIsEmpty", "globalSelfClose", "localSelfClose", "shouldSelfClose", "selfCloseStr", "attributesString", "tag", "preTagCloseStr", "postTag", "outputArr", "index", "newConfig", "outputObj", "privateVar", "hasContent", "newContentObj", "xml", "fnResult", "_outputArr", "singleVal", "_default", "MAX_CYCLE_LEN", "P", "assign", "n", "s", "InvalidParameter", "newFraction", "d", "DivisionByZero", "f", "Fraction", "a", "gcd", "factorize", "num", "factors", "i", "parse", "p1", "p2", "v", "w", "x", "y", "z", "A", "B", "C", "D", "N", "M", "NonIntegerParameter", "modpow", "b", "e", "m", "r", "cycleLen", "rem", "t", "cycleStart", "len", "rem1", "rem2", "places", "k", "eps", "thisABS", "cont", "excludeWhole", "whole", "str", "res", "dec", "cycLen", "cycOff", "escapeRegExp", "str", "flipFraction", "f", "greaterThanOne", "binarySearch", "ar", "el", "comp", "m", "n", "k", "cmp", "mod", "n", "m", "roundTo", "n", "r", "inv", "Interval", "_Interval", "ratio", "reference", "Fraction", "cents", "savarts", "a", "b", "Tuning", "_Tuning", "intervals", "metadata", "Interval", "Fraction", "interval", "first", "v", "i", "next", "flipFraction", "tone", "octave", "base", "n", "binarySearch", "Tone", "m", "lower", "upper", "nearest", "nearestTone", "nearestInterval", "divisions", "_", "_Tone", "tuning", "pitchClass", "pitch", "mod", "Multimap", "a", "b", "key", "value", "keys", "k", "callbackfn", "thisArg", "str", "entry", "Solmization", "tuning", "notes", "accidentals", "Multimap", "note", "accidental", "mod", "steps", "escapeRegExp", "tone", "a", "b", "name", "match", "Tone", "ToneRow", "_ToneRow", "tuning", "tones", "metadata", "tone", "index", "t", "target", "Tone", "axis", "cycles", "c", "descending", "current", "next", "last", "pitches", "pitch", "pitchClasses", "octave", "pitchClass", "ToneRowSolmized", "_ToneRowSolmized", "solmization", "row", "import_jstoxml", "package_default", "toXML", "jstoxml", "MUSICXML_VERSION", "MusicXML", "_MusicXML", "title", "objects", "options", "Solmization", "Tuning", "package_default", "measures", "object", "index", "measure", "beat", "tone", "toneIndex", "location", "style", "number", "name", "step", "accidental", "octave", "reference", "cents", "alter", "roundTo", "date"]
}
