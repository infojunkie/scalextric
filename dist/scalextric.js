/*! For license information please see scalextric.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Scalextric",[],e):"object"==typeof exports?exports.Scalextric=e():t.Scalextric=e()}(self,(function(){return(()=>{var t={628:function(t,e){var n;!function(i){"use strict";var s={s:1,n:0,d:1};function r(t){function e(){var e=Error.apply(this,arguments);e.name=this.name=t,this.stack=e.stack,this.message=e.message}function n(){}return n.prototype=Error.prototype,e.prototype=new n,e}var a=f.DivisionByZero=r("DivisionByZero"),o=f.InvalidParameter=r("InvalidParameter");function h(t,e){return isNaN(t=parseInt(t,10))&&u(),t*e}function u(){throw new o}var c=function(t,e){var n,i=0,r=1,o=1,c=0,l=0,f=0,p=1,d=1,v=0,w=1,y=1,g=1,M=1e7;if(null==t);else if(void 0!==e)o=(i=t)*(r=e);else switch(typeof t){case"object":"d"in t&&"n"in t?(i=t.n,r=t.d,"s"in t&&(i*=t.s)):0 in t?(i=t[0],1 in t&&(r=t[1])):u(),o=i*r;break;case"number":if(t<0&&(o=t,t=-t),t%1==0)i=t;else if(t>0){for(t>=1&&(t/=d=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));w<=M&&g<=M;){if(t===(n=(v+y)/(w+g))){w+g<=M?(i=v+y,r=w+g):g>w?(i=y,r=g):(i=v,r=w);break}t>n?(v+=y,w+=g):(y+=v,g+=w),w>M?(i=y,r=g):(i=v,r=w)}i*=d}else(isNaN(t)||isNaN(e))&&(r=i=NaN);break;case"string":if(null===(w=t.match(/\d+|./g))&&u(),"-"===w[v]?(o=-1,v++):"+"===w[v]&&v++,w.length===v+1?l=h(w[v++],o):"."===w[v+1]||"."===w[v]?("."!==w[v]&&(c=h(w[v++],o)),(1+ ++v===w.length||"("===w[v+1]&&")"===w[v+3]||"'"===w[v+1]&&"'"===w[v+3])&&(l=h(w[v],o),p=Math.pow(10,w[v].length),v++),("("===w[v]&&")"===w[v+2]||"'"===w[v]&&"'"===w[v+2])&&(f=h(w[v+1],o),d=Math.pow(10,w[v+1].length)-1,v+=3)):"/"===w[v+1]||":"===w[v+1]?(l=h(w[v],o),p=h(w[v+2],1),v+=3):"/"===w[v+3]&&" "===w[v+1]&&(c=h(w[v],o),l=h(w[v+2],o),p=h(w[v+4],1),v+=5),w.length<=v){o=i=f+(r=p*d)*c+d*l;break}default:u()}if(0===r)throw new a;s.s=o<0?-1:1,s.n=Math.abs(i),s.d=Math.abs(r)};function l(t,e){if(!t)return e;if(!e)return t;for(;;){if(!(t%=e))return e;if(!(e%=t))return t}}function f(t,e){if(!(this instanceof f))return new f(t,e);c(t,e),t=f.REDUCE?l(s.d,s.n):1,this.s=s.s,this.n=s.n/t,this.d=s.d/t}f.REDUCE=1,f.prototype={s:1,n:0,d:1,abs:function(){return new f(this.n,this.d)},neg:function(){return new f(-this.s*this.n,this.d)},add:function(t,e){return c(t,e),new f(this.s*this.n*s.d+s.s*this.d*s.n,this.d*s.d)},sub:function(t,e){return c(t,e),new f(this.s*this.n*s.d-s.s*this.d*s.n,this.d*s.d)},mul:function(t,e){return c(t,e),new f(this.s*s.s*this.n*s.n,this.d*s.d)},div:function(t,e){return c(t,e),new f(this.s*s.s*this.n*s.d,this.d*s.n)},clone:function(){return new f(this)},mod:function(t,e){return isNaN(this.n)||isNaN(this.d)?new f(NaN):void 0===t?new f(this.s*this.n%this.d,1):(c(t,e),0===s.n&&0===this.d&&f(0,0),new f(this.s*(s.d*this.n)%(s.n*this.d),s.d*this.d))},gcd:function(t,e){return c(t,e),new f(l(s.n,this.n)*l(s.d,this.d),s.d*this.d)},lcm:function(t,e){return c(t,e),0===s.n&&0===this.n?new f:new f(s.n*this.n,l(s.n,this.n)*l(s.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return new f(this.s*this.d,this.n)},pow:function(t){return t<0?new f(Math.pow(this.s*this.d,-t),Math.pow(this.n,-t)):new f(Math.pow(this.s*this.n,t),Math.pow(this.d,t))},equals:function(t,e){return c(t,e),this.s*this.n*s.d==s.s*s.n*this.d},compare:function(t,e){c(t,e);var n=this.s*this.n*s.d-s.s*s.n*this.d;return(0<n)-(n<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;var e=this.abs().toContinued();function n(t){return 1===t.length?new f(t[0]):n(t.slice(1)).inverse().add(t[0])}t=t||.001;for(var i=0;i<e.length;i++){var s=n(e.slice(0,i+1));if(s.sub(this.abs()).abs().valueOf()<t)return s.mul(this.s)}return this},divisible:function(t,e){return c(t,e),!(!(s.n*this.d)||this.n*s.d%(s.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var e,n="",i=this.n,s=this.d;return this.s<0&&(n+="-"),1===s?n+=i:(t&&(e=Math.floor(i/s))>0&&(n+=e,n+=" ",i%=s),n+=i,n+="/",n+=s),n},toLatex:function(t){var e,n="",i=this.n,s=this.d;return this.s<0&&(n+="-"),1===s?n+=i:(t&&(e=Math.floor(i/s))>0&&(n+=e,i%=s),n+="\\frac{",n+=i,n+="}{",n+=s,n+="}"),n},toContinued:function(){var t,e=this.n,n=this.d,i=[];if(isNaN(this.n)||isNaN(this.d))return i;do{i.push(Math.floor(e/n)),t=e%n,e=n,n=t}while(1!==e);return i},toString:function(t){var e,n=this.n,i=this.d;if(isNaN(n)||isNaN(i))return"NaN";f.REDUCE||(n/=e=l(n,i),i/=e),t=t||15;var s=function(t,e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var n=10%e,i=1;1!==n;i++)if(n=10*n%e,i>2e3)return 0;return i}(0,i),r=function(t,e,n){for(var i=1,s=function(t,e,n){for(var i=1;e>0;t=t*t%n,e>>=1)1&e&&(i=i*t%n);return i}(10,n,e),r=0;r<300;r++){if(i===s)return r;i=10*i%e,s=10*s%e}return 0}(0,i,s),a=-1===this.s?"-":"";if(a+=n/i|0,n%=i,(n*=10)&&(a+="."),s){for(var o=r;o--;)a+=n/i|0,n%=i,n*=10;for(a+="(",o=s;o--;)a+=n/i|0,n%=i,n*=10;a+=")"}else for(o=t;n&&o--;)a+=n/i|0,n%=i,n*=10;return a}},void 0===(n=function(){return f}.apply(e,[]))||(t.exports=n)}()},11:(t,e,n)=>{"use strict";n.r(e),n.d(e,{Interval:()=>o,Tuning:()=>i,TuningNotation:()=>l});var i={};n.r(i),n.d(i,{Tuning:()=>h,TuningTone:()=>u});var s,r=n(628),a=n.n(r);!function(t){t.escapeRegExp=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},t.primes=function(t){const e=[],n=[];for(let i=2;i<=t;++i)if(!e[i]){n.push(i);for(let n=i<<1;n<=t;n+=i)e[n]=!0}return n},t.flipFraction=function(t,e=!1){return e?t.abs().compare(1)<0?t.inverse():t:t.abs().compare(1)>0?t.inverse():t},t.binarySearch=function(t,e,n){let i=0,s=t.length-1;for(;i<=s;){const r=s+i>>1,a=n(e,t[r]);if(a>0)i=r+1;else{if(!(a<0))return r;s=r-1}}return~i},t.arrayEqual=function(t,e,n){return t.length===e.length&&t.every(((t,i)=>0===n(t,e[i])))},t.arrayUnique=function(t){return[...new Set(t)]},t.mod=function(t,e){return(t%e+e)%e}}(s||(s={}));class o{constructor(t){this.ratio=t}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(t){return new o(this.ratio.div(t.ratio))}static fromRatio(t){return new o(new(a())(t))}static fromCents(t){return new o(new(a())(Math.pow(2,t/1200)))}static fromSavarts(t){return new o(new(a())(Math.pow(10,t/1e3)))}static compare(t,e){return t.ratio.compare(e.ratio)}}o.JND=null;class h{constructor(t,e=[]){this.intervals=t,this.annotations=e,this.intervals.sort(o.compare),1!=this.intervals[0].ratio.valueOf()&&(this.intervals=[new o(new(a())(1)),...this.intervals])}static fromIntervals(t,e=[]){return new h(t.map((t=>"string"==typeof t?new o(new(a())(t)):o.fromCents(t))),e)}get transposable(){if(void 0!==this._transposable)return this._transposable;const t=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every(((e,n)=>{const i=e.difference(this.intervals[n]);return new o(s.flipFraction(i.difference(t).ratio,!0)).ratio.compare(o.JND.ratio)<0}))}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(t){return new o(this.intervals[t.pitchClass].ratio.mul(this.octave.ratio.pow(t.octave)))}nearest(t){const e=Math.floor(Math.log(t.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),n=new o(t.ratio.div(this.octave.ratio.pow(e))),i=s.binarySearch(this.intervals,n,o.compare);if(i>=0)return{tone:new u(this,i,e),interval:t,difference:new o(new(a())(1))};{const s=~i,r=Math.abs(this.intervals[s-1].difference(n).cents),a=Math.abs(this.intervals[s].difference(n).cents),o=new u(this,r<a?s-1:s,e),h=this.tune(o);return{tone:o,interval:h,difference:h.difference(t)}}}static intervalsEdo(t){return Array.from(Array(t+1)).map(((e,n)=>o.fromCents(1200/t*n)))}}class u{constructor(t,e,n){this.tuning=t,this.pitchClass=e,this.octave=n}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}static fromPitch(t,e){return new u(t,s.mod(e,t.steps),Math.floor(e/t.steps))}}class c{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[Symbol.iterator]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>{this.delete(t),this.keyValueMap.set(t,e);const n=this.valueKeyMap.get(e)||[];return this.valueKeyMap.set(e,[...n,t]),this},this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);this.keyValueMap.delete(t);const n=this.valueKeyMap.get(e).filter((e=>e!==t));return n.length>0?this.valueKeyMap.set(e,n):this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&(this.valueKeyMap.get(t).forEach((t=>{this.delete(t)})),!0),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,i)=>{t.apply(e,[n,i,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Multimap {",e=0;return this.forEach(((n,i)=>{e++,t+=i.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}}class l{constructor(t,e){this.tuning=t,this.map=e,this.regex=new RegExp("^("+Array.from(this.map.keys()).map(s.escapeRegExp).join("|")+")(-?\\d)$","i")}static fromNotesAccidentalsCombination(t,e,n){const i=new c;return Object.keys(e).forEach((r=>{i.set(""+r,e[r]),Object.keys(n).forEach((a=>{i.set(`${r}${a}`,s.mod(e[r]+n[a],t.steps))}))})),new l(t,i)}name(t){return[...this.map.getKey(t.pitchClass)].map((e=>`${e}${t.octave}`))}parse(t){const e=this.regex.exec(t);if(!e)throw new Error("[TuningNotation.parse] Could not parse note "+t);return new u(this.tuning,this.map.get(e[1]),parseInt(e[2],10))}}}},e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={exports:{}};return t[i].call(s.exports,s,s.exports,n),s.exports}return n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(11)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,