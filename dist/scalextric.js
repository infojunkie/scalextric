/*! For license information please see scalextric.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Scalextric=e():t.Scalextric=e()}(this,(()=>(()=>{var t={628:function(t,e){var n;!function(r){"use strict";var i={s:1,n:0,d:1};function o(t,e){if(isNaN(t=parseInt(t,10)))throw l.InvalidParameter;return t*e}function a(t,e){if(0===e)throw l.DivisionByZero;var n=Object.create(l.prototype);n.s=t<0?-1:1;var r=u(t=t<0?-t:t,e);return n.n=t/r,n.d=e/r,n}function s(t){for(var e={},n=t,r=2,i=4;i<=n;){for(;n%r==0;)n/=r,e[r]=(e[r]||0)+1;i+=1+2*r++}return n!==t?n>1&&(e[n]=(e[n]||0)+1):e[t]=(e[t]||0)+1,e}var c=function(t,e){var n,r=0,a=1,s=1,c=0,u=0,h=0,f=1,p=1,d=0,y=1,v=1,m=1,b=1e7;if(null==t);else if(void 0!==e){if(s=(r=t)*(a=e),r%1!=0||a%1!=0)throw l.NonIntegerParameter}else switch(typeof t){case"object":if("d"in t&&"n"in t)r=t.n,a=t.d,"s"in t&&(r*=t.s);else{if(!(0 in t))throw l.InvalidParameter;r=t[0],1 in t&&(a=t[1])}s=r*a;break;case"number":if(t<0&&(s=t,t=-t),t%1==0)r=t;else if(t>0){for(t>=1&&(t/=p=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));y<=b&&m<=b;){if(t===(n=(d+v)/(y+m))){y+m<=b?(r=d+v,a=y+m):m>y?(r=v,a=m):(r=d,a=y);break}t>n?(d+=v,y+=m):(v+=d,m+=y),y>b?(r=v,a=m):(r=d,a=y)}r*=p}else(isNaN(t)||isNaN(e))&&(a=r=NaN);break;case"string":if(null===(y=t.match(/\d+|./g)))throw l.InvalidParameter;if("-"===y[d]?(s=-1,d++):"+"===y[d]&&d++,y.length===d+1?u=o(y[d++],s):"."===y[d+1]||"."===y[d]?("."!==y[d]&&(c=o(y[d++],s)),(1+ ++d===y.length||"("===y[d+1]&&")"===y[d+3]||"'"===y[d+1]&&"'"===y[d+3])&&(u=o(y[d],s),f=Math.pow(10,y[d].length),d++),("("===y[d]&&")"===y[d+2]||"'"===y[d]&&"'"===y[d+2])&&(h=o(y[d+1],s),p=Math.pow(10,y[d+1].length)-1,d+=3)):"/"===y[d+1]||":"===y[d+1]?(u=o(y[d],s),f=o(y[d+2],1),d+=3):"/"===y[d+3]&&" "===y[d+1]&&(c=o(y[d],s),u=o(y[d+2],s),f=o(y[d+4],1),d+=5),y.length<=d){s=r=h+(a=f*p)*c+p*u;break}default:throw l.InvalidParameter}if(0===a)throw l.DivisionByZero;i.s=s<0?-1:1,i.n=Math.abs(r),i.d=Math.abs(a)};function u(t,e){if(!t)return e;if(!e)return t;for(;;){if(!(t%=e))return e;if(!(e%=t))return t}}function l(t,e){if(c(t,e),!(this instanceof l))return a(i.s*i.n,i.d);t=u(i.d,i.n),this.s=i.s,this.n=i.n/t,this.d=i.d/t}l.DivisionByZero=new Error("Division by Zero"),l.InvalidParameter=new Error("Invalid argument"),l.NonIntegerParameter=new Error("Parameters must be integer"),l.prototype={s:1,n:0,d:1,abs:function(){return a(this.n,this.d)},neg:function(){return a(-this.s*this.n,this.d)},add:function(t,e){return c(t,e),a(this.s*this.n*i.d+i.s*this.d*i.n,this.d*i.d)},sub:function(t,e){return c(t,e),a(this.s*this.n*i.d-i.s*this.d*i.n,this.d*i.d)},mul:function(t,e){return c(t,e),a(this.s*i.s*this.n*i.n,this.d*i.d)},div:function(t,e){return c(t,e),a(this.s*i.s*this.n*i.d,this.d*i.n)},clone:function(){return a(this.s*this.n,this.d)},mod:function(t,e){if(isNaN(this.n)||isNaN(this.d))return new l(NaN);if(void 0===t)return a(this.s*this.n%this.d,1);if(c(t,e),0===i.n&&0===this.d)throw l.DivisionByZero;return a(this.s*(i.d*this.n)%(i.n*this.d),i.d*this.d)},gcd:function(t,e){return c(t,e),a(u(i.n,this.n)*u(i.d,this.d),i.d*this.d)},lcm:function(t,e){return c(t,e),0===i.n&&0===this.n?a(0,1):a(i.n*this.n,u(i.n,this.n)*u(i.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return a(this.s*this.d,this.n)},pow:function(t,e){if(c(t,e),1===i.d)return i.s<0?a(Math.pow(this.s*this.d,i.n),Math.pow(this.n,i.n)):a(Math.pow(this.s*this.n,i.n),Math.pow(this.d,i.n));if(this.s<0)return null;var n=s(this.n),r=s(this.d),o=1,u=1;for(var l in n)if("1"!==l){if("0"===l){o=0;break}if(n[l]*=i.n,n[l]%i.d!=0)return null;n[l]/=i.d,o*=Math.pow(l,n[l])}for(var l in r)if("1"!==l){if(r[l]*=i.n,r[l]%i.d!=0)return null;r[l]/=i.d,u*=Math.pow(l,r[l])}return i.s<0?a(u,o):a(o,u)},equals:function(t,e){return c(t,e),this.s*this.n*i.d==i.s*i.n*this.d},compare:function(t,e){c(t,e);var n=this.s*this.n*i.d-i.s*i.n*this.d;return(0<n)-(n<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;t=t||.001;for(var e=this.abs(),n=e.toContinued(),r=1;r<n.length;r++){for(var i=a(n[r-1],1),o=r-2;o>=0;o--)i=i.inverse().add(n[o]);if(i.sub(e).abs().valueOf()<t)return i.mul(this.s)}return this},divisible:function(t,e){return c(t,e),!(!(i.n*this.d)||this.n*i.d%(i.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,n+=" ",r%=i),n+=r,n+="/",n+=i),n},toLatex:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,r%=i),n+="\\frac{",n+=r,n+="}{",n+=i,n+="}"),n},toContinued:function(){var t,e=this.n,n=this.d,r=[];if(isNaN(e)||isNaN(n))return r;do{r.push(Math.floor(e/n)),t=e%n,e=n,n=t}while(1!==e);return r},toString:function(t){var e=this.n,n=this.d;if(isNaN(e)||isNaN(n))return"NaN";t=t||15;var r=function(t,e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var n=10%e,r=1;1!==n;r++)if(n=10*n%e,r>2e3)return 0;return r}(0,n),i=function(t,e,n){for(var r=1,i=function(t,e,n){for(var r=1;e>0;t=t*t%n,e>>=1)1&e&&(r=r*t%n);return r}(10,n,e),o=0;o<300;o++){if(r===i)return o;r=10*r%e,i=10*i%e}return 0}(0,n,r),o=this.s<0?"-":"";if(o+=e/n|0,e%=n,(e*=10)&&(o+="."),r){for(var a=i;a--;)o+=e/n|0,e%=n,e*=10;for(o+="(",a=r;a--;)o+=e/n|0,e%=n,e*=10;o+=")"}else for(a=t;e&&a--;)o+=e/n|0,e%=n,e*=10;return o}},void 0===(n=function(){return l}.apply(e,[]))||(t.exports=n)}()},308:function(t,e){var n,r;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=function(t){"use strict";function e(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||a(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function r(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);a=!0);}catch(t){s=!0,i=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}}(t,e)||a(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.toXML=t.default=void 0;var u={ARRAY:"array",BOOLEAN:"boolean",DATE:"date",FUNCTION:"function",JSTOXML_OBJECT:"jstoxml-object",NULL:"null",NUMBER:"number",OBJECT:"object",STRING:"string"},l=[u.STRING,u.NUMBER,u.BOOLEAN],h=["_selfCloseTag","_attrs"],f=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").repeat(t)},p=function(t){return Array.isArray(t)&&u.ARRAY||c(t)===u.OBJECT&&null!==t&&t._name&&u.JSTOXML_OBJECT||t instanceof Date&&u.DATE||null===t&&u.NULL||c(t)},d=function(t){return t.startsWith("<![CDATA[")},y=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t;if(c(t)===u.STRING){if(d(t))return t;var i=new RegExp("(".concat(Object.keys(e).join("|"),")(?!(\\w|#)*;)"),"g");r=String(t).replace(i,(function(t,n){return e[n]||""}))}return"function"==typeof n?n(r):r},v=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return(Array.isArray(t)?t:Object.entries(t).map((function(t){var e=o(t,2);return i({},e[0],e[1])}))).reduce((function(t,i){var o=Object.keys(i)[0],a=i[o];if(c(n)===u.FUNCTION&&n(o,a))return t;var s=e?y(a,e):a,l=r||!0!==s?'="'.concat(s,'"'):"";return t.push("".concat(o).concat(l)),t}),[])},m=function(){var t=v(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0,arguments.length>2?arguments[2]:void 0,arguments.length>3?arguments[3]:void 0);if(0===t.length)return"";var e=t.join(" ");return" ".concat(e)},b=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(t).map((function(e){return{_name:e,_content:t[e]}}))},g=function(t){return l.includes(p(t))},w=function(t){return!t.match("<")},_=function(t){var e=t.header,n=t.isOutputStart;return e&&n?c(e)===u.BOOLEAN?'<?xml version="1.0" encoding="UTF-8"?>':e:""},O={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;"},M=function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=i.depth,a=void 0===o?0:o,s=i.indent,l=i._isFirstItem,v=i._isOutputStart,M=void 0===v||v,j=i.header,T=i.attributeReplacements,S=void 0===T?{}:T,N=i.attributeFilter,P=i.attributeExplicitTrue,k=void 0!==P&&P,E=i.contentReplacements,x=void 0===E?{}:E,I=i.contentMap,A=i.selfCloseTags,C=void 0===A||A,V="boolean"!=typeof S||S?r(r({},O),S):{},D="boolean"!=typeof x||x?r(r({},O),x):{},R=f(s,a),B=p(n),K=_({header:j,indent:s,depth:a,isOutputStart:M}),L=M&&!K&&l&&0===a,F=s&&!L?"\n":"",U="";switch(B){case u.JSTOXML_OBJECT:var J=n._name,z=n._content;if(null===z&&"function"!=typeof I){U="".concat(F).concat(R).concat(J);break}if(Array.isArray(z)&&z.every(g))return z.map((function(e){return t({_name:J,_content:e},r(r({},i),{},{depth:a,_isOutputStart:!1}))})).join("");if(h.includes(J))break;var X=t(z,r(r({},i),{},{depth:a+1,_isOutputStart:L})),$=p(X),G=w(X),q=d(X),Z="".concat(F).concat(R);if("_comment"===J){U+="".concat(Z,"\x3c!-- ").concat(z," --\x3e");break}var Y="undefined"===$||""===X,W=C,H=n._selfCloseTag,Q=c(H)===u.BOOLEAN?Y&&H:Y&&W,tt=Q?"/":"",et=m(n._attrs,V,N,k),nt="<".concat(J).concat(et).concat(tt,">"),rt=!s||G||q?"":"\n".concat(R),it=Q?"":"".concat(X).concat(rt,"</").concat(J,">");U+="".concat(Z).concat(nt).concat(it);break;case u.OBJECT:var ot=Object.keys(n);U=ot.map((function(o,a){var s=r(r({},i),{},{_isFirstItem:0===a,_isLastItem:a+1===ot.length,_isOutputStart:L}),c={_name:o};if(p(n[o])===u.OBJECT&&(h.forEach((function(t){var e=n[o][t];void 0!==e&&(c[t]=e,delete n[o][t])})),void 0!==n[o]._content&&Object.keys(n[o]).length>1)){var l=Object.assign({},n[o]);delete l._content,c._content=[].concat(e(b(l)),[n[o]._content])}return void 0===c._content&&(c._content=n[o]),t(c,s)}),i).join("");break;case u.FUNCTION:var at=n(i);U=t(at,i);break;case u.ARRAY:U=n.map((function(e,o){var a=r(r({},i),{},{_isFirstItem:0===o,_isLastItem:o+1===n.length,_isOutputStart:L});return t(e,a)})).join("");break;default:U=y(n,D,I)}return"".concat(K).concat(U)};t.toXML=M;var j={toXML:M};t.default=j},void 0===(r=n.apply(e,[e]))||(t.exports=r)},635:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interval=void 0;const r=n(655).__importDefault(n(628));class i{constructor(t){this.ratio=t}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(t){return new i(this.ratio.div(t.ratio))}static fromRatio(t){return new i(new r.default(t))}static fromCents(t){return new i(new r.default(Math.pow(2,t/1200)))}static fromSavarts(t){return new i(new r.default(Math.pow(10,t/1e3)))}static compare(t,e){return t.ratio.compare(e.ratio)}}e.Interval=i,i.JND=i.fromCents(5)},73:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MusicXML=void 0;const r=n(308),i=n(312),o=n(913),a=n(321);class s{constructor(t,e,n={}){this.title=t,this.objects=e,this.options=Object.assign({},s.defaultOptions,n),this.tuning=new i.Tuning(i.Tuning.intervalsEdo(12)),this.tuningNotation=o.TuningNotation.fromNotesAccidentalsCombination(this.tuning,s.notes,s.accidentalValues)}convert(){return(0,r.toXML)(this.convertDocument(),{header:'\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML 4.0 Partwise//EN" "http://www.musicxml.org/dtds/partwise.dtd">\n      '.trim(),indent:"  "})}convertDocument(){return{"score-partwise":[{work:{"work-title":this.title}},{identification:[{encoding:[{software:"@infojunkie/scalextric"},{"encoding-date":s.convertDate(new Date)},{_name:"supports",_attrs:{element:"accidental",type:"no"}},{_name:"supports",_attrs:{element:"transpose",type:"no"}},{_name:"supports",_attrs:{attribute:"new-page",element:"print",type:"yes",value:"yes"}},{_name:"supports",_attrs:{attribute:"new-system",element:"print",type:"yes",value:"yes"}}]}]},{defaults:{scaling:{millimeters:7,tenths:40}}},{"part-list":{_name:"score-part",_attrs:{id:"P1"},_content:{_name:"part-name",_attrs:{"print-object":"no"},_content:this.title}}},{_name:"part",_attrs:{id:"P1"},_content:this.convertObjects()}]}}convertObjects(){return this.objects.reduce(((t,e,n)=>{let r=this.convertMeasure(t.length+1);t.push(r),n>0&&r._content.push({_name:"print",_attrs:{"new-system":"yes"}}),0===n&&r._content.push({attributes:[{divisions:this.options.divisions},{key:[{fifths:0},{mode:"major"}]},{time:[{beats:this.options.time.beats},{"beat-type":this.options.time.beatType}]},{clef:[{sign:"G"},{line:2}]}]});const i=a.Annotation.findByLabel("label",e.annotations);i&&r._content.push({_name:"direction",_attrs:{placement:"above"},_content:[{"direction-type":[{words:i[0]}]}]});let o=0;return e.tones.forEach(((n,i)=>{r._content.push(this.convertNote(n)),o=(o+1)%this.options.time.beats,0===o&&i<e.tones.length-1&&(r=this.convertMeasure(t.length+1),t.push(r))})),r._content.push(this.convertBar("right","light-light")),t}),[])}convertBar(t,e){return{_name:"barline",_attrs:{location:t},_content:[{"bar-style":e}]}}convertMeasure(t){return{_name:"measure",_attrs:{number:t},_content:[]}}convertNote(t){const e=this.tuning.nearest(t.tune),n=this.tuningNotation.name(e.tone)[0],r=n[0],{accidental:i,alter:o}=n[1]in s.accidentalValues?{accidental:s.accidentalNames[n[1]],alter:s.accidentalValues[n[1]]}:{accidental:null,alter:0},a=n[n.length-1],c=e.difference.cents;return{_name:"note",_content:[{_name:"pitch",_content:[{step:r},{alter:o+Math.round(10*c)/1e3},{octave:a}]},{duration:this.options.divisions},{type:s.noteTypes[this.options.time.beatType]},Object.assign({},i&&{accidental:i})]}}static convertDate(t){return new Date(t.getTime()-6e4*t.getTimezoneOffset()).toISOString().split("T")[0]}}e.MusicXML=s,s.defaultOptions={divisions:768,time:{beats:4,beatType:4}},s.notes={C:0,D:2,E:4,F:5,G:7,A:9,B:11},s.accidentalValues={"#":1,b:-1},s.accidentalNames={"#":"sharp",b:"flat"},s.noteTypes={8:"eighth",4:"quarter",2:"half",1:"whole"}},186:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToneRow=void 0;const r=n(312);class i{constructor(t,e,n=[]){this.tuning=t,this.tones=e,this.annotations=n}transpose(t){return new i(this.tuning,this.tones.map((e=>r.TuningTone.fromPitch(this.tuning,t.pitch+e.pitch))))}invert(t){return new i(this.tuning,this.tones.map((e=>r.TuningTone.fromPitch(this.tuning,t.pitch-e.pitch))))}reverse(){return new i(this.tuning,[...this.tones].reverse())}rotate(t){const e=t%this.tones.length;return new i(this.tuning,[...this.tones.slice(e),...this.tones.slice(0,e)])}monotonize(t=!1){return new i(this.tuning,this.tones.reduce(((e,n)=>{const i=e.length>0?e[e.length-1]:n;return!t&&n.pitch<i.pitch?e.push(new r.TuningTone(this.tuning,n.pitchClass,i.octave+(n.pitchClass<i.pitchClass?1:0))):t&&n.pitch>i.pitch?e.push(new r.TuningTone(this.tuning,n.pitchClass,i.octave+(n.pitchClass>i.pitchClass?-1:0))):e.push(n),e}),new Array))}get pitches(){return this.tones.map((t=>t.pitch))}static fromPitches(t,e,n=[]){return new i(t,e.map((e=>r.TuningTone.fromPitch(t,e))),n)}static fromPitchClasses(t,e,n,o=[]){return new i(t,e.map((e=>new r.TuningTone(t,e,n))),o)}}e.ToneRow=i},312:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningTone=e.Tuning=void 0;const r=n(655).__importDefault(n(628)),i=n(823),o=n(635);class a{constructor(t,e=[]){this.intervals=t,this.annotations=e,this.intervals.sort(o.Interval.compare),1!=this.intervals[0].ratio.valueOf()&&(this.intervals=[new o.Interval(new r.default(1)),...this.intervals])}static fromIntervals(t,e=[]){return new a(t.map((t=>"string"==typeof t?new o.Interval(new r.default(t)):o.Interval.fromCents(t))),e)}get transposable(){if(void 0!==this._transposable)return this._transposable;const t=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every(((e,n)=>{const r=e.difference(this.intervals[n]);return new o.Interval((0,i.flipFraction)(r.difference(t).ratio,!0)).ratio.compare(o.Interval.JND.ratio)<0}))}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(t){return new o.Interval(this.intervals[t.pitchClass].ratio.mul(this.octave.ratio.pow(t.octave)))}nearest(t){const e=Math.floor(Math.log(t.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),n=new o.Interval(t.ratio.div(this.octave.ratio.pow(e))),a=(0,i.binarySearch)(this.intervals,n,o.Interval.compare);if(a>=0)return{tone:new s(this,a,e),interval:t,difference:new o.Interval(new r.default(1))};{const r=~a,i=Math.abs(this.intervals[r-1].difference(n).cents),o=Math.abs(this.intervals[r].difference(n).cents),c=new s(this,i<o?r-1:r,e),u=this.tune(c);return{tone:c,interval:u,difference:u.difference(t)}}}static intervalsEdo(t){return Array.from(Array(t+1)).map(((e,n)=>o.Interval.fromCents(1200/t*n)))}}e.Tuning=a;class s{constructor(t,e,n){this.tuning=t,this.pitchClass=e,this.octave=n}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}get tune(){return this.tuning.tune(this)}static fromPitch(t,e){return new s(t,(0,i.mod)(e,t.steps),Math.floor(e/t.steps))}}e.TuningTone=s},913:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningNotation=void 0;const r=n(312),i=n(823),o=n(329);class a{constructor(t,e){this.tuning=t,this.map=e,this.regex=new RegExp("^("+Array.from(this.map.keys()).map(i.escapeRegExp).join("|")+")(-?\\d)$","i")}static fromNotesAccidentalsCombination(t,e,n){const r=new o.Multimap;return Object.keys(e).forEach((o=>{r.set(`${o}`,e[o]),Object.keys(n).forEach((a=>{r.set(`${o}${a}`,(0,i.mod)(e[o]+n[a],t.steps))}))})),new a(t,r)}name(t){return[...this.map.getKey(t.pitchClass)].sort(((t,e)=>t.length-e.length)).map((e=>`${e}${t.octave}`))}parse(t){const e=this.regex.exec(t);if(!e)throw new Error(`[TuningNotation.parse] Could not parse note ${t}`);return new r.TuningTone(this.tuning,this.map.get(e[1]),parseInt(e[2],10))}}e.TuningNotation=a},607:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(655);r.__exportStar(n(312),e),r.__exportStar(n(913),e),r.__exportStar(n(635),e),r.__exportStar(n(186),e),r.__exportStar(n(73),e),r.__exportStar(n(321),e)},321:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Annotation=void 0,e.Annotation=class{static findByLabel(t,e){return e.filter((e=>e.label=t)).map((t=>t.value))}constructor(t,e){this.label=t,this.value=e}}},329:(t,e)=>{"use strict";var n,r;Object.defineProperty(e,"__esModule",{value:!0}),e.Multimap=e.Bimap=void 0,e.Bimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[n]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>(this.delete(t),this.deleteValue(e),this.keyValueMap.set(t,e),this.valueKeyMap.set(e,t),this),this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);return this.keyValueMap.delete(t),this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&this.delete(this.valueKeyMap.get(t)),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Bimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,n=Symbol.iterator,e.Multimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[r]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>{this.delete(t),this.keyValueMap.set(t,e);const n=this.valueKeyMap.get(e)||[];return this.valueKeyMap.set(e,[...n,t]),this},this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);this.keyValueMap.delete(t);const n=this.valueKeyMap.get(e).filter((e=>e!==t));return n.length>0?this.valueKeyMap.set(e,n):this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&(this.valueKeyMap.get(t).forEach((t=>{this.delete(t)})),!0),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Multimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,r=Symbol.iterator},823:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arrayRange=e.mod=e.arrayUnique=e.arrayEqual=e.binarySearch=e.flipFraction=e.primes=e.escapeRegExp=void 0,e.escapeRegExp=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},e.primes=function(t){const e=[],n=[];for(let r=2;r<=t;++r)if(!e[r]){n.push(r);for(let n=r<<1;n<=t;n+=r)e[n]=!0}return n},e.flipFraction=function(t,e=!1){return e?t.abs().compare(1)<0?t.inverse():t:t.abs().compare(1)>0?t.inverse():t},e.binarySearch=function(t,e,n){let r=0,i=t.length-1;for(;r<=i;){const o=i+r>>1,a=n(e,t[o]);if(a>0)r=o+1;else{if(!(a<0))return o;i=o-1}}return~r},e.arrayEqual=function(t,e,n){return t.length===e.length&&t.every(((t,r)=>0===n(t,e[r])))},e.arrayUnique=function(t){return[...new Set(t)]},e.mod=function(t,e){return(t%e+e)%e},e.arrayRange=function(t,e=0){return[...Array(t).keys()].map((t=>t+e))}},655:(t,e,n)=>{"use strict";n.r(e),n.d(e,{__assign:()=>o,__asyncDelegator:()=>T,__asyncGenerator:()=>j,__asyncValues:()=>S,__await:()=>M,__awaiter:()=>d,__classPrivateFieldGet:()=>x,__classPrivateFieldIn:()=>A,__classPrivateFieldSet:()=>I,__createBinding:()=>v,__decorate:()=>s,__esDecorate:()=>u,__exportStar:()=>m,__extends:()=>i,__generator:()=>y,__importDefault:()=>E,__importStar:()=>k,__makeTemplateObject:()=>N,__metadata:()=>p,__param:()=>c,__propKey:()=>h,__read:()=>g,__rest:()=>a,__runInitializers:()=>l,__setFunctionName:()=>f,__spread:()=>w,__spreadArray:()=>O,__spreadArrays:()=>_,__values:()=>b});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function s(t,e,n,r){var i,o=arguments.length,a=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(i=t[s])&&(a=(o<3?i(a):o>3?i(e,n,a):i(e,n))||a);return o>3&&a&&Object.defineProperty(e,n,a),a}function c(t,e){return function(n,r){e(n,r,t)}}function u(t,e,n,r,i,o){function a(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var s,c=r.kind,u="getter"===c?"get":"setter"===c?"set":"value",l=!e&&t?r.static?t:t.prototype:null,h=e||(l?Object.getOwnPropertyDescriptor(l,r.name):{}),f=!1,p=n.length-1;p>=0;p--){var d={};for(var y in r)d[y]="access"===y?{}:r[y];for(var y in r.access)d.access[y]=r.access[y];d.addInitializer=function(t){if(f)throw new TypeError("Cannot add initializers after decoration has completed");o.push(a(t||null))};var v=(0,n[p])("accessor"===c?{get:h.get,set:h.set}:h[u],d);if("accessor"===c){if(void 0===v)continue;if(null===v||"object"!=typeof v)throw new TypeError("Object expected");(s=a(v.get))&&(h.get=s),(s=a(v.set))&&(h.set=s),(s=a(v.init))&&i.push(s)}else(s=a(v))&&("field"===c?i.push(s):h[u]=s)}l&&Object.defineProperty(l,r.name,h),f=!0}function l(t,e,n){for(var r=arguments.length>2,i=0;i<e.length;i++)n=r?e[i].call(t,n):e[i].call(t);return r?n:void 0}function h(t){return"symbol"==typeof t?t:"".concat(t)}function f(t,e,n){return"symbol"==typeof e&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(t,"name",{configurable:!0,value:n?"".concat(n," ",e):e})}function p(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function d(t,e,n,r){return new(n||(n=Promise))((function(i,o){function a(t){try{c(r.next(t))}catch(t){o(t)}}function s(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))}function y(t,e){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,s[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}var v=Object.create?function(t,e,n,r){void 0===r&&(r=n);var i=Object.getOwnPropertyDescriptor(e,n);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,i)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]};function m(t,e){for(var n in t)"default"===n||Object.prototype.hasOwnProperty.call(e,n)||v(e,t,n)}function b(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function w(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(g(arguments[e]));return t}function _(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function O(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function M(t){return this instanceof M?(this.v=t,this):new M(t)}function j(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof M?Promise.resolve(n.value.v).then(c,u):l(o[0][2],n)}catch(t){l(o[0][3],t)}var n}function c(t){s("next",t)}function u(t){s("throw",t)}function l(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}function T(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:M(t[r](e)),done:!1}:i?i(e):e}:i}}function S(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=b(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}function N(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}var P=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e};function k(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&v(e,t,n);return P(e,t),e}function E(t){return t&&t.__esModule?t:{default:t}}function x(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}function I(t,e,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!i:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(t,n):i?i.value=n:e.set(t,n),n}function A(t,e){if(null===e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("Cannot use 'in' operator on non-object");return"function"==typeof t?e===t:t.has(e)}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}return n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,