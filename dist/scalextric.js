/*! For license information please see scalextric.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Scalextric=e():t.Scalextric=e()}(this,(()=>(()=>{var t={628:function(t,e){var r;!function(n){"use strict";var i={s:1,n:0,d:1};function s(t,e){if(isNaN(t=parseInt(t,10)))throw l.InvalidParameter;return t*e}function a(t,e){if(0===e)throw l.DivisionByZero;var r=Object.create(l.prototype);r.s=t<0?-1:1;var n=h(t=t<0?-t:t,e);return r.n=t/n,r.d=e/n,r}function o(t){for(var e={},r=t,n=2,i=4;i<=r;){for(;r%n==0;)r/=n,e[n]=(e[n]||0)+1;i+=1+2*n++}return r!==t?r>1&&(e[r]=(e[r]||0)+1):e[t]=(e[t]||0)+1,e}var u=function(t,e){var r,n=0,a=1,o=1,u=0,h=0,c=0,f=1,p=1,d=0,y=1,v=1,g=1,m=1e7;if(null==t);else if(void 0!==e){if(o=(n=t)*(a=e),n%1!=0||a%1!=0)throw l.NonIntegerParameter}else switch(typeof t){case"object":if("d"in t&&"n"in t)n=t.n,a=t.d,"s"in t&&(n*=t.s);else{if(!(0 in t))throw l.InvalidParameter;n=t[0],1 in t&&(a=t[1])}o=n*a;break;case"number":if(t<0&&(o=t,t=-t),t%1==0)n=t;else if(t>0){for(t>=1&&(t/=p=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));y<=m&&g<=m;){if(t===(r=(d+v)/(y+g))){y+g<=m?(n=d+v,a=y+g):g>y?(n=v,a=g):(n=d,a=y);break}t>r?(d+=v,y+=g):(v+=d,g+=y),y>m?(n=v,a=g):(n=d,a=y)}n*=p}else(isNaN(t)||isNaN(e))&&(a=n=NaN);break;case"string":if(null===(y=t.match(/\d+|./g)))throw l.InvalidParameter;if("-"===y[d]?(o=-1,d++):"+"===y[d]&&d++,y.length===d+1?h=s(y[d++],o):"."===y[d+1]||"."===y[d]?("."!==y[d]&&(u=s(y[d++],o)),(1+ ++d===y.length||"("===y[d+1]&&")"===y[d+3]||"'"===y[d+1]&&"'"===y[d+3])&&(h=s(y[d],o),f=Math.pow(10,y[d].length),d++),("("===y[d]&&")"===y[d+2]||"'"===y[d]&&"'"===y[d+2])&&(c=s(y[d+1],o),p=Math.pow(10,y[d+1].length)-1,d+=3)):"/"===y[d+1]||":"===y[d+1]?(h=s(y[d],o),f=s(y[d+2],1),d+=3):"/"===y[d+3]&&" "===y[d+1]&&(u=s(y[d],o),h=s(y[d+2],o),f=s(y[d+4],1),d+=5),y.length<=d){o=n=c+(a=f*p)*u+p*h;break}default:throw l.InvalidParameter}if(0===a)throw l.DivisionByZero;i.s=o<0?-1:1,i.n=Math.abs(n),i.d=Math.abs(a)};function h(t,e){if(!t)return e;if(!e)return t;for(;;){if(!(t%=e))return e;if(!(e%=t))return t}}function l(t,e){if(u(t,e),!(this instanceof l))return a(i.s*i.n,i.d);t=h(i.d,i.n),this.s=i.s,this.n=i.n/t,this.d=i.d/t}l.DivisionByZero=new Error("Division by Zero"),l.InvalidParameter=new Error("Invalid argument"),l.NonIntegerParameter=new Error("Parameters must be integer"),l.prototype={s:1,n:0,d:1,abs:function(){return a(this.n,this.d)},neg:function(){return a(-this.s*this.n,this.d)},add:function(t,e){return u(t,e),a(this.s*this.n*i.d+i.s*this.d*i.n,this.d*i.d)},sub:function(t,e){return u(t,e),a(this.s*this.n*i.d-i.s*this.d*i.n,this.d*i.d)},mul:function(t,e){return u(t,e),a(this.s*i.s*this.n*i.n,this.d*i.d)},div:function(t,e){return u(t,e),a(this.s*i.s*this.n*i.d,this.d*i.n)},clone:function(){return a(this.s*this.n,this.d)},mod:function(t,e){if(isNaN(this.n)||isNaN(this.d))return new l(NaN);if(void 0===t)return a(this.s*this.n%this.d,1);if(u(t,e),0===i.n&&0===this.d)throw l.DivisionByZero;return a(this.s*(i.d*this.n)%(i.n*this.d),i.d*this.d)},gcd:function(t,e){return u(t,e),a(h(i.n,this.n)*h(i.d,this.d),i.d*this.d)},lcm:function(t,e){return u(t,e),0===i.n&&0===this.n?a(0,1):a(i.n*this.n,h(i.n,this.n)*h(i.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):a(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return a(this.s*this.d,this.n)},pow:function(t,e){if(u(t,e),1===i.d)return i.s<0?a(Math.pow(this.s*this.d,i.n),Math.pow(this.n,i.n)):a(Math.pow(this.s*this.n,i.n),Math.pow(this.d,i.n));if(this.s<0)return null;var r=o(this.n),n=o(this.d),s=1,h=1;for(var l in r)if("1"!==l){if("0"===l){s=0;break}if(r[l]*=i.n,r[l]%i.d!=0)return null;r[l]/=i.d,s*=Math.pow(l,r[l])}for(var l in n)if("1"!==l){if(n[l]*=i.n,n[l]%i.d!=0)return null;n[l]/=i.d,h*=Math.pow(l,n[l])}return i.s<0?a(h,s):a(s,h)},equals:function(t,e){return u(t,e),this.s*this.n*i.d==i.s*i.n*this.d},compare:function(t,e){u(t,e);var r=this.s*this.n*i.d-i.s*i.n*this.d;return(0<r)-(r<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;t=t||.001;for(var e=this.abs(),r=e.toContinued(),n=1;n<r.length;n++){for(var i=a(r[n-1],1),s=n-2;s>=0;s--)i=i.inverse().add(r[s]);if(i.sub(e).abs().valueOf()<t)return i.mul(this.s)}return this},divisible:function(t,e){return u(t,e),!(!(i.n*this.d)||this.n*i.d%(i.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var e,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(t&&(e=Math.floor(n/i))>0&&(r+=e,r+=" ",n%=i),r+=n,r+="/",r+=i),r},toLatex:function(t){var e,r="",n=this.n,i=this.d;return this.s<0&&(r+="-"),1===i?r+=n:(t&&(e=Math.floor(n/i))>0&&(r+=e,n%=i),r+="\\frac{",r+=n,r+="}{",r+=i,r+="}"),r},toContinued:function(){var t,e=this.n,r=this.d,n=[];if(isNaN(e)||isNaN(r))return n;do{n.push(Math.floor(e/r)),t=e%r,e=r,r=t}while(1!==e);return n},toString:function(t){var e=this.n,r=this.d;if(isNaN(e)||isNaN(r))return"NaN";t=t||15;var n=function(t,e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var r=10%e,n=1;1!==r;n++)if(r=10*r%e,n>2e3)return 0;return n}(0,r),i=function(t,e,r){for(var n=1,i=function(t,e,r){for(var n=1;e>0;t=t*t%r,e>>=1)1&e&&(n=n*t%r);return n}(10,r,e),s=0;s<300;s++){if(n===i)return s;n=10*n%e,i=10*i%e}return 0}(0,r,n),s=this.s<0?"-":"";if(s+=e/r|0,e%=r,(e*=10)&&(s+="."),n){for(var a=i;a--;)s+=e/r|0,e%=r,e*=10;for(s+="(",a=n;a--;)s+=e/r|0,e%=r,e*=10;s+=")"}else for(a=t;e&&a--;)s+=e/r|0,e%=r,e*=10;return s}},void 0===(r=function(){return l}.apply(e,[]))||(t.exports=r)}()},635:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interval=void 0;const n=r(655).__importDefault(r(628));class i{constructor(t){this.ratio=t}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(t){return new i(this.ratio.div(t.ratio))}static fromRatio(t){return new i(new n.default(t))}static fromCents(t){return new i(new n.default(Math.pow(2,t/1200)))}static fromSavarts(t){return new i(new n.default(Math.pow(10,t/1e3)))}static compare(t,e){return t.ratio.compare(e.ratio)}}e.Interval=i,i.JND=i.fromCents(5)},312:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningTone=e.Tuning=void 0;const n=r(655).__importDefault(r(628)),i=r(823),s=r(635);class a{constructor(t,e=[]){this.intervals=t,this.annotations=e,this.intervals.sort(s.Interval.compare),1!=this.intervals[0].ratio.valueOf()&&(this.intervals=[new s.Interval(new n.default(1)),...this.intervals])}static fromIntervals(t,e=[]){return new a(t.map((t=>"string"==typeof t?new s.Interval(new n.default(t)):s.Interval.fromCents(t))),e)}get transposable(){if(void 0!==this._transposable)return this._transposable;const t=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every(((e,r)=>{const n=e.difference(this.intervals[r]);return new s.Interval((0,i.flipFraction)(n.difference(t).ratio,!0)).ratio.compare(s.Interval.JND.ratio)<0}))}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(t){return new s.Interval(this.intervals[t.pitchClass].ratio.mul(this.octave.ratio.pow(t.octave)))}nearest(t){const e=Math.floor(Math.log(t.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),r=new s.Interval(t.ratio.div(this.octave.ratio.pow(e))),a=(0,i.binarySearch)(this.intervals,r,s.Interval.compare);if(a>=0)return{tone:new o(this,a,e),interval:t,difference:new s.Interval(new n.default(1))};{const n=~a,i=Math.abs(this.intervals[n-1].difference(r).cents),s=Math.abs(this.intervals[n].difference(r).cents),u=new o(this,i<s?n-1:n,e),h=this.tune(u);return{tone:u,interval:h,difference:h.difference(t)}}}static intervalsEdo(t){return Array.from(Array(t+1)).map(((e,r)=>s.Interval.fromCents(1200/t*r)))}}e.Tuning=a;class o{constructor(t,e,r){this.tuning=t,this.pitchClass=e,this.octave=r}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}get tune(){return this.tuning.tune(this)}static fromPitch(t,e){return new o(t,(0,i.mod)(e,t.steps),Math.floor(e/t.steps))}}e.TuningTone=o},913:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningNotation=void 0;const n=r(312),i=r(823),s=r(329);class a{constructor(t,e){this.tuning=t,this.map=e,this.regex=new RegExp("^("+Array.from(this.map.keys()).map(i.escapeRegExp).join("|")+")(-?\\d)$","i")}static fromNotesAccidentalsCombination(t,e,r){const n=new s.Multimap;return Object.keys(e).forEach((s=>{n.set(`${s}`,e[s]),Object.keys(r).forEach((a=>{n.set(`${s}${a}`,(0,i.mod)(e[s]+r[a],t.steps))}))})),new a(t,n)}name(t){return[...this.map.getKey(t.pitchClass)].sort(((t,e)=>t.length-e.length)).map((e=>`${e}${t.octave}`))}parse(t){const e=this.regex.exec(t);if(!e)throw new Error(`[TuningNotation.parse] Could not parse note ${t}`);return new n.TuningTone(this.tuning,this.map.get(e[1]),parseInt(e[2],10))}}e.TuningNotation=a},607:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(655);n.__exportStar(r(312),e),n.__exportStar(r(913),e),n.__exportStar(r(635),e)},329:(t,e)=>{"use strict";var r,n;Object.defineProperty(e,"__esModule",{value:!0}),e.Multimap=e.Bimap=void 0,e.Bimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[r]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>(this.delete(t),this.deleteValue(e),this.keyValueMap.set(t,e),this.valueKeyMap.set(e,t),this),this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);return this.keyValueMap.delete(t),this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&this.delete(this.valueKeyMap.get(t)),this.forEach=(t,e)=>{this.keyValueMap.forEach(((r,n)=>{t.apply(e,[r,n,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Bimap {",e=0;return this.forEach(((r,n)=>{e++,t+=n.toString()+" => "+r.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,r=Symbol.iterator,e.Multimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[n]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>{this.delete(t),this.keyValueMap.set(t,e);const r=this.valueKeyMap.get(e)||[];return this.valueKeyMap.set(e,[...r,t]),this},this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);this.keyValueMap.delete(t);const r=this.valueKeyMap.get(e).filter((e=>e!==t));return r.length>0?this.valueKeyMap.set(e,r):this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&(this.valueKeyMap.get(t).forEach((t=>{this.delete(t)})),!0),this.forEach=(t,e)=>{this.keyValueMap.forEach(((r,n)=>{t.apply(e,[r,n,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Multimap {",e=0;return this.forEach(((r,n)=>{e++,t+=n.toString()+" => "+r.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,n=Symbol.iterator},823:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.arrayRange=e.mod=e.arrayUnique=e.arrayEqual=e.binarySearch=e.flipFraction=e.primes=e.escapeRegExp=void 0,e.escapeRegExp=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},e.primes=function(t){const e=[],r=[];for(let n=2;n<=t;++n)if(!e[n]){r.push(n);for(let r=n<<1;r<=t;r+=n)e[r]=!0}return r},e.flipFraction=function(t,e=!1){return e?t.abs().compare(1)<0?t.inverse():t:t.abs().compare(1)>0?t.inverse():t},e.binarySearch=function(t,e,r){let n=0,i=t.length-1;for(;n<=i;){const s=i+n>>1,a=r(e,t[s]);if(a>0)n=s+1;else{if(!(a<0))return s;i=s-1}}return~n},e.arrayEqual=function(t,e,r){return t.length===e.length&&t.every(((t,n)=>0===r(t,e[n])))},e.arrayUnique=function(t){return[...new Set(t)]},e.mod=function(t,e){return(t%e+e)%e},e.arrayRange=function(t,e=0){return[...Array(t).keys()].map((t=>t+e))}},655:(t,e,r)=>{"use strict";r.r(e),r.d(e,{__assign:()=>s,__asyncDelegator:()=>b,__asyncGenerator:()=>w,__asyncValues:()=>M,__await:()=>m,__awaiter:()=>l,__classPrivateFieldGet:()=>O,__classPrivateFieldSet:()=>k,__createBinding:()=>f,__decorate:()=>o,__exportStar:()=>p,__extends:()=>i,__generator:()=>c,__importDefault:()=>S,__importStar:()=>N,__makeTemplateObject:()=>_,__metadata:()=>h,__param:()=>u,__read:()=>y,__rest:()=>a,__spread:()=>v,__spreadArrays:()=>g,__values:()=>d});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},n(t,e)};function i(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var s=function(){return s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},s.apply(this,arguments)};function a(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}function o(t,e,r,n){var i,s=arguments.length,a=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,r,n);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(s<3?i(a):s>3?i(e,r,a):i(e,r))||a);return s>3&&a&&Object.defineProperty(e,r,a),a}function u(t,e){return function(r,n){e(r,n,t)}}function h(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,r,n){return new(r||(r=Promise))((function(i,s){function a(t){try{u(n.next(t))}catch(t){s(t)}}function o(t){try{u(n.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,o)}u((n=n.apply(t,e||[])).next())}))}function c(t,e){var r,n,i,s,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&s[0]?n.return:s[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,s[1])).done)return i;switch(n=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function f(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}function p(t,e){for(var r in t)"default"===r||e.hasOwnProperty(r)||(e[r]=t[r])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,s=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=s.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function g(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),i=0;for(e=0;e<r;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,i++)n[i]=s[a];return n}function m(t){return this instanceof m?(this.v=t,this):new m(t)}function w(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),s=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){s.push([t,e,r,n])>1||o(t,e)}))})}function o(t,e){try{(r=i[t](e)).value instanceof m?Promise.resolve(r.value.v).then(u,h):l(s[0][2],r)}catch(t){l(s[0][3],t)}var r}function u(t){o("next",t)}function h(t){o("throw",t)}function l(t,e){t(e),s.shift(),s.length&&o(s[0][0],s[0][1])}}function b(t){var e,r;return e={},n("next"),n("throw",(function(t){throw t})),n("return"),e[Symbol.iterator]=function(){return this},e;function n(n,i){e[n]=t[n]?function(e){return(r=!r)?{value:m(t[n](e)),done:"return"===n}:i?i(e):e}:i}}function M(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=d(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}function _(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function N(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}function S(t){return t&&t.__esModule?t:{default:t}}function O(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function k(t,e,r){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,r),r}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,r),s.exports}return r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,