/*! For license information please see scalextric.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Scalextric=e():t.Scalextric=e()}(this,(()=>(()=>{var t={628:function(t,e){var n;!function(r){"use strict";var i={s:1,n:0,d:1};function a(t,e){if(isNaN(t=parseInt(t,10)))throw l.InvalidParameter;return t*e}function s(t,e){if(0===e)throw l.DivisionByZero;var n=Object.create(l.prototype);n.s=t<0?-1:1;var r=c(t=t<0?-t:t,e);return n.n=t/r,n.d=e/r,n}function o(t){for(var e={},n=t,r=2,i=4;i<=n;){for(;n%r==0;)n/=r,e[r]=(e[r]||0)+1;i+=1+2*r++}return n!==t?n>1&&(e[n]=(e[n]||0)+1):e[t]=(e[t]||0)+1,e}var u=function(t,e){var n,r=0,s=1,o=1,u=0,c=0,h=0,f=1,p=1,d=0,v=1,y=1,m=1,b=1e7;if(null==t);else if(void 0!==e){if(o=(r=t)*(s=e),r%1!=0||s%1!=0)throw l.NonIntegerParameter}else switch(typeof t){case"object":if("d"in t&&"n"in t)r=t.n,s=t.d,"s"in t&&(r*=t.s);else{if(!(0 in t))throw l.InvalidParameter;r=t[0],1 in t&&(s=t[1])}o=r*s;break;case"number":if(t<0&&(o=t,t=-t),t%1==0)r=t;else if(t>0){for(t>=1&&(t/=p=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));v<=b&&m<=b;){if(t===(n=(d+y)/(v+m))){v+m<=b?(r=d+y,s=v+m):m>v?(r=y,s=m):(r=d,s=v);break}t>n?(d+=y,v+=m):(y+=d,m+=v),v>b?(r=y,s=m):(r=d,s=v)}r*=p}else(isNaN(t)||isNaN(e))&&(s=r=NaN);break;case"string":if(null===(v=t.match(/\d+|./g)))throw l.InvalidParameter;if("-"===v[d]?(o=-1,d++):"+"===v[d]&&d++,v.length===d+1?c=a(v[d++],o):"."===v[d+1]||"."===v[d]?("."!==v[d]&&(u=a(v[d++],o)),(1+ ++d===v.length||"("===v[d+1]&&")"===v[d+3]||"'"===v[d+1]&&"'"===v[d+3])&&(c=a(v[d],o),f=Math.pow(10,v[d].length),d++),("("===v[d]&&")"===v[d+2]||"'"===v[d]&&"'"===v[d+2])&&(h=a(v[d+1],o),p=Math.pow(10,v[d+1].length)-1,d+=3)):"/"===v[d+1]||":"===v[d+1]?(c=a(v[d],o),f=a(v[d+2],1),d+=3):"/"===v[d+3]&&" "===v[d+1]&&(u=a(v[d],o),c=a(v[d+2],o),f=a(v[d+4],1),d+=5),v.length<=d){o=r=h+(s=f*p)*u+p*c;break}default:throw l.InvalidParameter}if(0===s)throw l.DivisionByZero;i.s=o<0?-1:1,i.n=Math.abs(r),i.d=Math.abs(s)};function c(t,e){if(!t)return e;if(!e)return t;for(;;){if(!(t%=e))return e;if(!(e%=t))return t}}function l(t,e){if(u(t,e),!(this instanceof l))return s(i.s*i.n,i.d);t=c(i.d,i.n),this.s=i.s,this.n=i.n/t,this.d=i.d/t}l.DivisionByZero=new Error("Division by Zero"),l.InvalidParameter=new Error("Invalid argument"),l.NonIntegerParameter=new Error("Parameters must be integer"),l.prototype={s:1,n:0,d:1,abs:function(){return s(this.n,this.d)},neg:function(){return s(-this.s*this.n,this.d)},add:function(t,e){return u(t,e),s(this.s*this.n*i.d+i.s*this.d*i.n,this.d*i.d)},sub:function(t,e){return u(t,e),s(this.s*this.n*i.d-i.s*this.d*i.n,this.d*i.d)},mul:function(t,e){return u(t,e),s(this.s*i.s*this.n*i.n,this.d*i.d)},div:function(t,e){return u(t,e),s(this.s*i.s*this.n*i.d,this.d*i.n)},clone:function(){return s(this.s*this.n,this.d)},mod:function(t,e){if(isNaN(this.n)||isNaN(this.d))return new l(NaN);if(void 0===t)return s(this.s*this.n%this.d,1);if(u(t,e),0===i.n&&0===this.d)throw l.DivisionByZero;return s(this.s*(i.d*this.n)%(i.n*this.d),i.d*this.d)},gcd:function(t,e){return u(t,e),s(c(i.n,this.n)*c(i.d,this.d),i.d*this.d)},lcm:function(t,e){return u(t,e),0===i.n&&0===this.n?s(0,1):s(i.n*this.n,c(i.n,this.n)*c(i.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):s(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):s(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new l(NaN):s(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return s(this.s*this.d,this.n)},pow:function(t,e){if(u(t,e),1===i.d)return i.s<0?s(Math.pow(this.s*this.d,i.n),Math.pow(this.n,i.n)):s(Math.pow(this.s*this.n,i.n),Math.pow(this.d,i.n));if(this.s<0)return null;var n=o(this.n),r=o(this.d),a=1,c=1;for(var l in n)if("1"!==l){if("0"===l){a=0;break}if(n[l]*=i.n,n[l]%i.d!=0)return null;n[l]/=i.d,a*=Math.pow(l,n[l])}for(var l in r)if("1"!==l){if(r[l]*=i.n,r[l]%i.d!=0)return null;r[l]/=i.d,c*=Math.pow(l,r[l])}return i.s<0?s(c,a):s(a,c)},equals:function(t,e){return u(t,e),this.s*this.n*i.d==i.s*i.n*this.d},compare:function(t,e){u(t,e);var n=this.s*this.n*i.d-i.s*i.n*this.d;return(0<n)-(n<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;t=t||.001;for(var e=this.abs(),n=e.toContinued(),r=1;r<n.length;r++){for(var i=s(n[r-1],1),a=r-2;a>=0;a--)i=i.inverse().add(n[a]);if(i.sub(e).abs().valueOf()<t)return i.mul(this.s)}return this},divisible:function(t,e){return u(t,e),!(!(i.n*this.d)||this.n*i.d%(i.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,n+=" ",r%=i),n+=r,n+="/",n+=i),n},toLatex:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,r%=i),n+="\\frac{",n+=r,n+="}{",n+=i,n+="}"),n},toContinued:function(){var t,e=this.n,n=this.d,r=[];if(isNaN(e)||isNaN(n))return r;do{r.push(Math.floor(e/n)),t=e%n,e=n,n=t}while(1!==e);return r},toString:function(t){var e=this.n,n=this.d;if(isNaN(e)||isNaN(n))return"NaN";t=t||15;var r=function(t,e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var n=10%e,r=1;1!==n;r++)if(n=10*n%e,r>2e3)return 0;return r}(0,n),i=function(t,e,n){for(var r=1,i=function(t,e,n){for(var r=1;e>0;t=t*t%n,e>>=1)1&e&&(r=r*t%n);return r}(10,n,e),a=0;a<300;a++){if(r===i)return a;r=10*r%e,i=10*i%e}return 0}(0,n,r),a=this.s<0?"-":"";if(a+=e/n|0,e%=n,(e*=10)&&(a+="."),r){for(var s=i;s--;)a+=e/n|0,e%=n,e*=10;for(a+="(",s=r;s--;)a+=e/n|0,e%=n,e*=10;a+=")"}else for(s=t;e&&s--;)a+=e/n|0,e%=n,e*=10;return a}},void 0===(n=function(){return l}.apply(e,[]))||(t.exports=n)}()},308:function(t,e){var n,r;"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self&&self,n=function(t){"use strict";function e(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||s(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function r(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e,n){return(e=function(t){var e=function(t,e){if("object"!==u(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,e||"default");if("object"!==u(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===u(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,i,a,s,o=[],u=!0,c=!1;try{if(a=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(o.push(r.value),o.length!==e);u=!0);}catch(t){c=!0,i=t}finally{try{if(!u&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(c)throw i}}return o}}(t,e)||s(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.toXML=t.default=void 0;var c="array",l="boolean",h="date",f="function",p="jstoxml-object",d="null",v="object",y="string",m=[y,"number",l],b=["_selfCloseTag","_attrs"],g=function(t){return Array.isArray(t)&&c||u(t)===v&&null!==t&&t._name&&p||t instanceof Date&&h||null===t&&d||u(t)},_=function(t){return t.startsWith("<![CDATA[")},w=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t;if(u(t)===y){if(_(t))return t;var i=new RegExp("(".concat(Object.keys(e).join("|"),")(?!(\\w|#)*;)"),"g");r=String(t).replace(i,(function(t,n){return e[n]||""}))}return"function"==typeof n?n(r):r},M=function(){var t=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return(Array.isArray(t)?t:Object.entries(t).map((function(t){var e=a(t,2);return i({},e[0],e[1])}))).reduce((function(t,i){var a=Object.keys(i)[0],s=i[a];if(u(n)===f&&n(a,s))return t;var o=e?w(s,e):s,c=r||!0!==o?'="'.concat(o,'"'):"";return t.push("".concat(a).concat(c)),t}),[])}(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0,arguments.length>2?arguments[2]:void 0,arguments.length>3?arguments[3]:void 0);if(0===t.length)return"";var e=t.join(" ");return" ".concat(e)},O=function(t){return m.includes(g(t))},j={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;"},S=function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=i.depth,s=void 0===a?0:a,o=i.indent,h=i._isFirstItem,d=i._isOutputStart,y=void 0===d||d,m=i.header,S=i.attributeReplacements,k=void 0===S?{}:S,P=i.attributeFilter,x=i.attributeExplicitTrue,N=void 0!==x&&x,T=i.contentReplacements,I=void 0===T?{}:T,E=i.contentMap,V=i.selfCloseTags,A=void 0===V||V,D="boolean"!=typeof k||k?r(r({},j),k):{},C="boolean"!=typeof I||I?r(r({},j),I):{},K=function(){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").repeat(t)}(o,s),R=g(n),z=function(t){var e=t.header,n=t.isOutputStart;return e&&n?u(e)===l?'<?xml version="1.0" encoding="UTF-8"?>':e:""}({header:m,indent:o,depth:s,isOutputStart:y}),L=y&&!z&&h&&0===s,$=o&&!L?"\n":"",q="";switch(R){case p:var B=n._name,F=n._content;if(null===F&&"function"!=typeof E){q="".concat($).concat(K).concat(B);break}if(Array.isArray(F)&&F.every(O))return F.map((function(e){return t({_name:B,_content:e},r(r({},i),{},{depth:s,_isOutputStart:!1}))})).join("");if(b.includes(B))break;var G=t(F,r(r({},i),{},{depth:s+1,_isOutputStart:L})),X=g(G),U=!G.match("<"),Z=_(G),J="".concat($).concat(K);if("_comment"===B){q+="".concat(J,"\x3c!-- ").concat(F," --\x3e");break}var W="undefined"===X||""===G,Y=A,H=n._selfCloseTag,Q=u(H)===l?W&&H:W&&Y,tt=Q?"/":"",et=M(n._attrs,D,P,N),nt="<".concat(B).concat(et).concat(tt,">"),rt=!o||U||Z?"":"\n".concat(K),it=Q?"":"".concat(G).concat(rt,"</").concat(B,">");q+="".concat(J).concat(nt).concat(it);break;case v:var at=Object.keys(n);q=at.map((function(a,s){var o=r(r({},i),{},{_isFirstItem:0===s,_isLastItem:s+1===at.length,_isOutputStart:L}),u={_name:a};if(g(n[a])===v&&(b.forEach((function(t){var e=n[a][t];void 0!==e&&(u[t]=e,delete n[a][t])})),void 0!==n[a]._content&&Object.keys(n[a]).length>1)){var c=Object.assign({},n[a]);delete c._content,u._content=[].concat(e(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(t).map((function(e){return{_name:e,_content:t[e]}}))}(c)),[n[a]._content])}return void 0===u._content&&(u._content=n[a]),t(u,o)}),i).join("");break;case f:var st=n(i);q=t(st,i);break;case c:q=n.map((function(e,a){var s=r(r({},i),{},{_isFirstItem:0===a,_isLastItem:a+1===n.length,_isOutputStart:L});return t(e,s)})).join("");break;default:q=w(n,C,E)}return"".concat(z).concat(q)};t.toXML=S;var k={toXML:S};t.default=k},void 0===(r=n.apply(e,[e]))||(t.exports=r)},635:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interval=void 0;const r=n(655).__importDefault(n(628));class i{constructor(t){this.ratio=t}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(t){return new i(this.ratio.div(t.ratio))}static fromRatio(t){return new i(new r.default(t))}static fromCents(t){return new i(new r.default(Math.pow(2,t/1200)))}static fromSavarts(t){return new i(new r.default(Math.pow(10,t/1e3)))}static compare(t,e){return t.ratio.compare(e.ratio)}}e.Interval=i,i.JND=i.fromCents(5)},73:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MusicXML=void 0;const r=n(655),i=n(308),a=n(312),s=n(624),o=n(321),u=n(823),c=r.__importDefault(n(147));class l{constructor(t,e,n={}){this.title=t,this.objects=e,this.options=Object.assign({},l.defaultOptions,n),this.reference=new s.Solmization(a.Tuning.fromEdo(12),{C:0,D:2,E:4,F:5,G:7,A:9,B:11},{})}convert(){return(0,i.toXML)(this.convertDocument(),{header:'\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML 4.0 Partwise//EN" "http://www.musicxml.org/dtds/partwise.dtd">\n      '.trim(),indent:"  "})}convertDocument(){return{_name:"score-partwise",_attrs:{version:"4.0"},_content:[{work:{"work-title":this.title}},{identification:[{encoding:[{software:`@infojunkie/scalextric ${c.default.version}`},{"encoding-date":l.convertDate(new Date)}]}]},{"part-list":{_name:"score-part",_attrs:{id:"P1"},_content:{_name:"part-name",_attrs:{"print-object":"no"},_content:this.title}}},{_name:"part",_attrs:{id:"P1"},_content:this.convertObjects()}]}}convertObjects(){return this.objects.reduce(((t,e,n)=>{let r=this.convertMeasure(t.length+1);t.push(r),n>0&&r._content.push({_name:"print",_attrs:{"new-system":"yes"}}),0===n&&r._content.push({attributes:[{divisions:this.options.divisions},{key:[{fifths:0},{mode:"major"}]},{time:[{beats:this.options.time.beats},{"beat-type":this.options.time.beatType}]},{clef:[{sign:"G"},{line:2}]}]},{_name:"direction",_attrs:{placement:"above"},_content:[{"direction-type":[{_name:"metronome",_attrs:{parentheses:"no"},_content:[{"beat-unit":l.durations[this.options.time.beatType]},{"per-minute":this.options.tempo}]}]},{_name:"sound",_attrs:{tempo:this.options.tempo}}]});const i=o.Annotation.findByLabel("label",e.annotations);i&&r._content.push({_name:"direction",_attrs:{placement:"above"},_content:[{"direction-type":[{words:i[0]}]}]});let a=0;if(e.tones.forEach(((n,i)=>{r._content.push(this.convertNote(n,e)),a=(a+1)%this.options.time.beats,0===a&&i<e.tones.length-1&&(r=this.convertMeasure(t.length+1),t.push(r))})),a>0)for(;a++<this.options.time.beats;)r._content.push({_name:"note",_content:[{_name:"rest"},{duration:this.options.divisions},{type:l.durations[this.options.time.beatType]}]});return r._content.push(this.convertBar("right","light-light")),t}),[])}convertBar(t,e){return{_name:"barline",_attrs:{location:t},_content:[{"bar-style":e}]}}convertMeasure(t){return{_name:"measure",_attrs:{number:t},_content:[]}}convertNote(t,e){const n=e.solmization.name(t)[0],r=n[0],i=this.convertAccidental(n.slice(1,-1)),a=n[n.length-1],s=this.reference.parse(`${r}${a}`),o=t.tune.difference(s.tune).cents;return{_name:"note",_content:[{_name:"pitch",_content:[{step:r},{alter:(0,u.roundTo)(o/100,.05)},{octave:a}]},{duration:this.options.divisions},{type:l.durations[this.options.time.beatType]},Object.assign({},i&&"other"!==i&&{accidental:i}),Object.assign({},i&&"other"===i&&{_name:"accidental",_content:i,_attrs:{smufl:n.slice(1,-1)}})]}}convertAccidental(t){return t.length?t in l.accidentals?l.accidentals[t]:"other":null}static convertDate(t){return new Date(t.getTime()-6e4*t.getTimezoneOffset()).toISOString().split("T")[0]}}e.MusicXML=l,l.defaultOptions={divisions:768,time:{beats:4,beatType:4},tempo:60},l.accidentals={"#":"sharp","♯":"sharp","":"sharp",n:"natural","♮":"natural","":"natural",b:"flat","♭":"flat","":"flat",x:"double-sharp","𝄪":"double-sharp","":"double-sharp","##":"sharp-sharp","♯♯":"sharp-sharp","":"sharp-sharp",bb:"flat-flat","♭♭":"flat-flat","𝄫":"flat-flat","":"flat-flat","n#":"natural-sharp","♮♯":"natural-sharp","":"natural-sharp",nb:"natural-flat","♮♭":"natural-flat","":"natural-flat","#x":"triple-sharp","♯𝄪":"triple-sharp","":"triple-sharp",bbb:"triple-flat","♭♭♭":"triple-flat","":"triple-flat","":"quarter-flat","":"quarter-sharp","":"three-quarters-flat","":"three-quarters-sharp","":"sharp-down","":"sharp-up","":"natural-down","":"natural-up","":"flat-down","":"flat-up","":"double-sharp-down","":"double-sharp-up","":"flat-flat-down","":"flat-flat-up","":"arrow-down","":"arrow-up","":"slash-quarter-sharp","":"slash-sharp","":"slash-flat","":"double-slash-flat","":"quarter-flat","":"quarter-sharp","":"flat","":"sharp","":"sharp-1","":"sharp-2","":"sharp-3","":"sharp-5","":"flat-1","":"flat-2","":"flat-3","":"flat-4","":"sori","":"koron"},l.durations={8:"eighth",4:"quarter",2:"half",1:"whole"}},624:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Solmization=void 0;const r=n(312),i=n(823),a=n(329);e.Solmization=class{constructor(t,e,n){this.tuning=t,this.notes=e,this.accidentals=n,this.parseMap=new a.Multimap,Object.keys(e).forEach((r=>{this.parseMap.set(r,e[r]),Object.keys(n).forEach((a=>{this.parseMap.set(`${r}${a}`,(0,i.mod)(e[r]+n[a],t.steps))}))})),this.nameMap=new a.Multimap,Object.keys(e).forEach((r=>{const a=[0];this.nameMap.set(r,e[r]),Object.keys(n).forEach((s=>{a.includes(n[s])||(this.nameMap.set(`${r}${s}`,(0,i.mod)(e[r]+n[s],t.steps)),a.push(n[s]))}))})),this.regex=new RegExp("^("+Array.from(this.parseMap.keys()).map(i.escapeRegExp).join("|")+")(-?\\d)$","i")}name(t){return[...this.nameMap.getKey(t.pitchClass)].sort(((t,e)=>t.length-e.length)).map((e=>`${e}${t.octave}`))}parse(t){const e=this.regex.exec(t);if(!e)throw new Error(`[Solmization.parse] Could not match note ${t}`);return new r.Tone(this.tuning,this.parseMap.get(e[1]),parseInt(e[2],10))}}},186:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToneRowSolmized=e.ToneRow=void 0;const r=n(312);class i{constructor(t,e,n=[]){if(this.tuning=t,this.tones=e,this.annotations=n,e.some(((t,n)=>!!e.slice(n+1).find((e=>e.pitchClass===t.pitchClass)))))throw Error("Found repeating pitch class in tone row.")}transpose(t){return new i(this.tuning,this.tones.map((e=>r.Tone.fromPitch(this.tuning,t.pitch+e.pitch))))}invert(t){return new i(this.tuning,this.tones.map((e=>r.Tone.fromPitch(this.tuning,t.pitch-e.pitch))))}reverse(){return new i(this.tuning,[...this.tones].reverse())}rotate(t){const e=t%this.tones.length;return new i(this.tuning,[...this.tones.slice(e),...this.tones.slice(0,e)])}monotonize(t=!1){return new i(this.tuning,this.tones.reduce(((e,n)=>{const i=e.length>0?e[e.length-1]:n;return!t&&n.pitch<i.pitch?e.push(new r.Tone(this.tuning,n.pitchClass,i.octave+(n.pitchClass<i.pitchClass?1:0))):t&&n.pitch>i.pitch?e.push(new r.Tone(this.tuning,n.pitchClass,i.octave+(n.pitchClass>i.pitchClass?-1:0))):e.push(n),e}),[]))}get pitches(){return this.tones.map((t=>t.pitch))}static fromPitches(t,e,n=[]){return new i(t,e.map((e=>r.Tone.fromPitch(t,e))),n)}static fromPitchClasses(t,e,n,a=[]){return new i(t,e.map((e=>new r.Tone(t,e,n))),a)}}e.ToneRow=i;class a extends i{constructor(t,e,n,r=[]){super(t,n,r),this.tuning=t,this.solmization=e,this.tones=n,this.annotations=r}static fromToneRow(t,e){return new a(t.tuning,e,t.tones,t.annotations)}}e.ToneRowSolmized=a},312:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Tone=e.Tuning=void 0;const r=n(655).__importDefault(n(628)),i=n(823),a=n(635);class s{constructor(t,e=[]){this.intervals=t,this.annotations=e,this.intervals.sort(a.Interval.compare),1!=this.intervals[0].ratio.valueOf()&&(this.intervals=[new a.Interval(new r.default(1)),...this.intervals])}static fromIntervals(t,e=[]){return new s(t.map((t=>"string"==typeof t?new a.Interval(new r.default(t)):a.Interval.fromCents(t))),e)}get transposable(){if(void 0!==this._transposable)return this._transposable;const t=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every(((e,n)=>{const r=e.difference(this.intervals[n]);return new a.Interval((0,i.flipFraction)(r.difference(t).ratio,!0)).ratio.compare(a.Interval.JND.ratio)<0}))}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(t){return new a.Interval(this.intervals[t.pitchClass].ratio.mul(this.octave.ratio.pow(t.octave)))}nearest(t){const e=Math.floor(Math.log(t.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),n=new a.Interval(t.ratio.div(this.octave.ratio.pow(e))),s=(0,i.binarySearch)(this.intervals,n,a.Interval.compare);if(s>=0)return{tone:new o(this,s,e),interval:t,difference:new a.Interval(new r.default(1))};{const r=~s,i=Math.abs(this.intervals[r-1].difference(n).cents),a=Math.abs(this.intervals[r].difference(n).cents),u=new o(this,i<a?r-1:r,e),c=this.tune(u);return{tone:u,interval:c,difference:c.difference(t)}}}static fromEdo(t){return new s(Array.from(Array(t+1)).map(((e,n)=>a.Interval.fromCents(1200/t*n))))}}e.Tuning=s;class o{constructor(t,e,n){this.tuning=t,this.pitchClass=e,this.octave=n}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}get tune(){return this.tuning.tune(this)}static fromPitch(t,e){return new o(t,(0,i.mod)(e,t.steps),Math.floor(e/t.steps))}}e.Tone=o},607:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(655);r.__exportStar(n(312),e),r.__exportStar(n(624),e),r.__exportStar(n(635),e),r.__exportStar(n(186),e),r.__exportStar(n(73),e),r.__exportStar(n(321),e)},321:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Annotation=void 0,e.Annotation=class{static findByLabel(t,e){return e.filter((e=>e.label===t)).map((t=>t.value))}constructor(t,e){this.label=t,this.value=e}}},329:(t,e)=>{"use strict";var n,r;Object.defineProperty(e,"__esModule",{value:!0}),e.Multimap=e.Bimap=void 0,e.Bimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[n]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>(this.delete(t),this.deleteValue(e),this.keyValueMap.set(t,e),this.valueKeyMap.set(e,t),this),this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);return this.keyValueMap.delete(t),this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&this.delete(this.valueKeyMap.get(t)),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Bimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,n=Symbol.iterator,e.Multimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[r]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>{this.delete(t),this.keyValueMap.set(t,e);const n=this.valueKeyMap.get(e)||[];return this.valueKeyMap.set(e,[...n,t]),this},this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);this.keyValueMap.delete(t);const n=this.valueKeyMap.get(e).filter((e=>e!==t));return n.length>0?this.valueKeyMap.set(e,n):this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&(this.valueKeyMap.get(t).forEach((t=>{this.delete(t)})),!0),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Multimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},Symbol.toStringTag,r=Symbol.iterator},823:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.roundTo=e.arrayRange=e.mod=e.arrayUnique=e.arrayEqual=e.binarySearch=e.flipFraction=e.primes=e.escapeRegExp=void 0,e.escapeRegExp=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},e.primes=function(t){const e=[],n=[];for(let r=2;r<=t;++r)if(!e[r]){n.push(r);for(let n=r<<1;n<=t;n+=r)e[n]=!0}return n},e.flipFraction=function(t,e=!1){return e?t.abs().compare(1)<0?t.inverse():t:t.abs().compare(1)>0?t.inverse():t},e.binarySearch=function(t,e,n){let r=0,i=t.length-1;for(;r<=i;){const a=i+r>>1,s=n(e,t[a]);if(s>0)r=a+1;else{if(!(s<0))return a;i=a-1}}return~r},e.arrayEqual=function(t,e,n){return t.length===e.length&&t.every(((t,r)=>0===n(t,e[r])))},e.arrayUnique=function(t){return[...new Set(t)]},e.mod=function(t,e){return(t%e+e)%e},e.arrayRange=function(t,e=0){return[...Array(t).keys()].map((t=>t+e))},e.roundTo=function(t,e){const n=1/e;return Math.round(t*n)/n}},655:(t,e,n)=>{"use strict";n.r(e),n.d(e,{__assign:()=>a,__asyncDelegator:()=>_,__asyncGenerator:()=>g,__asyncValues:()=>w,__await:()=>b,__awaiter:()=>l,__classPrivateFieldGet:()=>S,__classPrivateFieldSet:()=>k,__createBinding:()=>f,__decorate:()=>o,__exportStar:()=>p,__extends:()=>i,__generator:()=>h,__importDefault:()=>j,__importStar:()=>O,__makeTemplateObject:()=>M,__metadata:()=>c,__param:()=>u,__read:()=>v,__rest:()=>s,__spread:()=>y,__spreadArrays:()=>m,__values:()=>d});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},r(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var a=function(){return a=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},a.apply(this,arguments)};function s(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function o(t,e,n,r){var i,a=arguments.length,s=a<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(s=(a<3?i(s):a>3?i(e,n,s):i(e,n))||s);return a>3&&s&&Object.defineProperty(e,n,s),s}function u(t,e){return function(n,r){e(n,r,t)}}function c(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))((function(i,a){function s(t){try{u(r.next(t))}catch(t){a(t)}}function o(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,o)}u((r=r.apply(t,e||[])).next())}))}function h(t,e){var n,r,i,a,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}}function f(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}function p(t,e){for(var n in t)"default"===n||e.hasOwnProperty(n)||(e[n]=t[n])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function v(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,a=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=a.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(i)throw i.error}}return s}function y(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(v(arguments[e]));return t}function m(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var a=arguments[e],s=0,o=a.length;s<o;s++,i++)r[i]=a[s];return r}function b(t){return this instanceof b?(this.v=t,this):new b(t)}function g(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),a=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){a.push([t,e,n,r])>1||o(t,e)}))})}function o(t,e){try{(n=i[t](e)).value instanceof b?Promise.resolve(n.value.v).then(u,c):l(a[0][2],n)}catch(t){l(a[0][3],t)}var n}function u(t){o("next",t)}function c(t){o("throw",t)}function l(t,e){t(e),a.shift(),a.length&&o(a[0][0],a[0][1])}}function _(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:b(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function w(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}function M(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function O(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function j(t){return t&&t.__esModule?t:{default:t}}function S(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function k(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}},147:t=>{"use strict";t.exports=JSON.parse('{"name":"scalextric","version":"0.4.2","description":"Like Scala for Web programmers","main":"dist/scalextric.js","types":"dist/index.d.ts","scripts":{"build":"webpack","develop":"webpack --mode=development","test":"npm run test:lint && npm run test:unit","test:lint":"eslint src","test:unit":"nyc ts-mocha -p tsconfig.json test/**/*.spec.ts","test:bundle":"npm run build && mocha test/**/*.spec.js","build:chords":"python src/utils/chordtable/generate.py > data/chords.json && echo \'Generate data/chords.json file\'","build:scales":"wget -q -O data/scales.zip http://huygens-fokker.org/docs/scales.zip && unzip -o data/scales.zip -d data/ && for f in data/scl/*; do iconv -f iso-8859-1 -t utf-8 \\"$f\\" -o \\"$f\\"; done"},"author":"Karim Ratib <karim.ratib@gmail.com> (https://github.com/infojunkie)","license":"GPL-3.0-only","devDependencies":{"@types/chai":"^4.2.18","@types/mocha":"^10.0.0","@types/node":"^16.11.7","@typescript-eslint/eslint-plugin":"^5.4.0","@typescript-eslint/parser":"^5.4.0","@xmldom/xmldom":"^0.8.6","chai":"^4.3.4","chai-as-promised":"^7.1.1","chai-deep-closeto":"^0.1.1","eslint":"^8.2.0","eslint-config-google":"^0.14.0","eslint-config-prettier":"^8.3.0","eslint-webpack-plugin":"^3.1.1","http-server":"^14.1.1","mocha":"^10.2.0","nyc":"^15.1.0","ts-loader":"^9.2.6","ts-mocha":"^10.0.0","ts-node":"^10.4.0","typescript":"^4.9.4","validate-with-xmllint":"^1.2.1","webpack":"^5.76.0","webpack-cli":"^4.7.0"},"dependencies":{"fraction.js":"^4.1.2","jstoxml":"^3.2.6"}}')}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={exports:{}};return t[r].call(a.exports,a,a.exports,n),a.exports}return n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,