/*! For license information please see scalextric.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Scalextric=e():t.Scalextric=e()}(this,(function(){return(()=>{var t={628:function(t,e){var n;!function(r){"use strict";var i={s:1,n:0,d:1};function s(t){function e(){var e=Error.apply(this,arguments);e.name=this.name=t,this.stack=e.stack,this.message=e.message}function n(){}return n.prototype=Error.prototype,e.prototype=new n,e}var a=f.DivisionByZero=s("DivisionByZero"),o=f.InvalidParameter=s("InvalidParameter");function u(t,e){return isNaN(t=parseInt(t,10))&&h(),t*e}function h(){throw new o}var l=function(t,e){var n,r=0,s=1,o=1,l=0,c=0,f=0,p=1,d=1,y=0,v=1,w=1,g=1,m=1e7;if(null==t);else if(void 0!==e)o=(r=t)*(s=e);else switch(typeof t){case"object":"d"in t&&"n"in t?(r=t.n,s=t.d,"s"in t&&(r*=t.s)):0 in t?(r=t[0],1 in t&&(s=t[1])):h(),o=r*s;break;case"number":if(t<0&&(o=t,t=-t),t%1==0)r=t;else if(t>0){for(t>=1&&(t/=d=Math.pow(10,Math.floor(1+Math.log(t)/Math.LN10)));v<=m&&g<=m;){if(t===(n=(y+w)/(v+g))){v+g<=m?(r=y+w,s=v+g):g>v?(r=w,s=g):(r=y,s=v);break}t>n?(y+=w,v+=g):(w+=y,g+=v),v>m?(r=w,s=g):(r=y,s=v)}r*=d}else(isNaN(t)||isNaN(e))&&(s=r=NaN);break;case"string":if(null===(v=t.match(/\d+|./g))&&h(),"-"===v[y]?(o=-1,y++):"+"===v[y]&&y++,v.length===y+1?c=u(v[y++],o):"."===v[y+1]||"."===v[y]?("."!==v[y]&&(l=u(v[y++],o)),(1+ ++y===v.length||"("===v[y+1]&&")"===v[y+3]||"'"===v[y+1]&&"'"===v[y+3])&&(c=u(v[y],o),p=Math.pow(10,v[y].length),y++),("("===v[y]&&")"===v[y+2]||"'"===v[y]&&"'"===v[y+2])&&(f=u(v[y+1],o),d=Math.pow(10,v[y+1].length)-1,y+=3)):"/"===v[y+1]||":"===v[y+1]?(c=u(v[y],o),p=u(v[y+2],1),y+=3):"/"===v[y+3]&&" "===v[y+1]&&(l=u(v[y],o),c=u(v[y+2],o),p=u(v[y+4],1),y+=5),v.length<=y){o=r=f+(s=p*d)*l+d*c;break}default:h()}if(0===s)throw new a;i.s=o<0?-1:1,i.n=Math.abs(r),i.d=Math.abs(s)};function c(t,e){if(!t)return e;if(!e)return t;for(;;){if(!(t%=e))return e;if(!(e%=t))return t}}function f(t,e){if(!(this instanceof f))return new f(t,e);l(t,e),t=f.REDUCE?c(i.d,i.n):1,this.s=i.s,this.n=i.n/t,this.d=i.d/t}f.REDUCE=1,f.prototype={s:1,n:0,d:1,abs:function(){return new f(this.n,this.d)},neg:function(){return new f(-this.s*this.n,this.d)},add:function(t,e){return l(t,e),new f(this.s*this.n*i.d+i.s*this.d*i.n,this.d*i.d)},sub:function(t,e){return l(t,e),new f(this.s*this.n*i.d-i.s*this.d*i.n,this.d*i.d)},mul:function(t,e){return l(t,e),new f(this.s*i.s*this.n*i.n,this.d*i.d)},div:function(t,e){return l(t,e),new f(this.s*i.s*this.n*i.d,this.d*i.n)},clone:function(){return new f(this)},mod:function(t,e){return isNaN(this.n)||isNaN(this.d)?new f(NaN):void 0===t?new f(this.s*this.n%this.d,1):(l(t,e),0===i.n&&0===this.d&&f(0,0),new f(this.s*(i.d*this.n)%(i.n*this.d),i.d*this.d))},gcd:function(t,e){return l(t,e),new f(c(i.n,this.n)*c(i.d,this.d),i.d*this.d)},lcm:function(t,e){return l(t,e),0===i.n&&0===this.n?new f:new f(i.n*this.n,c(i.n,this.n)*c(i.d,this.d))},ceil:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.ceil(t*this.s*this.n/this.d),t)},floor:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.floor(t*this.s*this.n/this.d),t)},round:function(t){return t=Math.pow(10,t||0),isNaN(this.n)||isNaN(this.d)?new f(NaN):new f(Math.round(t*this.s*this.n/this.d),t)},inverse:function(){return new f(this.s*this.d,this.n)},pow:function(t){return t<0?new f(Math.pow(this.s*this.d,-t),Math.pow(this.n,-t)):new f(Math.pow(this.s*this.n,t),Math.pow(this.d,t))},equals:function(t,e){return l(t,e),this.s*this.n*i.d==i.s*i.n*this.d},compare:function(t,e){l(t,e);var n=this.s*this.n*i.d-i.s*i.n*this.d;return(0<n)-(n<0)},simplify:function(t){if(isNaN(this.n)||isNaN(this.d))return this;var e=this.abs().toContinued();function n(t){return 1===t.length?new f(t[0]):n(t.slice(1)).inverse().add(t[0])}t=t||.001;for(var r=0;r<e.length;r++){var i=n(e.slice(0,r+1));if(i.sub(this.abs()).abs().valueOf()<t)return i.mul(this.s)}return this},divisible:function(t,e){return l(t,e),!(!(i.n*this.d)||this.n*i.d%(i.n*this.d))},valueOf:function(){return this.s*this.n/this.d},toFraction:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,n+=" ",r%=i),n+=r,n+="/",n+=i),n},toLatex:function(t){var e,n="",r=this.n,i=this.d;return this.s<0&&(n+="-"),1===i?n+=r:(t&&(e=Math.floor(r/i))>0&&(n+=e,r%=i),n+="\\frac{",n+=r,n+="}{",n+=i,n+="}"),n},toContinued:function(){var t,e=this.n,n=this.d,r=[];if(isNaN(this.n)||isNaN(this.d))return r;do{r.push(Math.floor(e/n)),t=e%n,e=n,n=t}while(1!==e);return r},toString:function(t){var e,n=this.n,r=this.d;if(isNaN(n)||isNaN(r))return"NaN";f.REDUCE||(n/=e=c(n,r),r/=e),t=t||15;var i=function(t,e){for(;e%2==0;e/=2);for(;e%5==0;e/=5);if(1===e)return 0;for(var n=10%e,r=1;1!==n;r++)if(n=10*n%e,r>2e3)return 0;return r}(0,r),s=function(t,e,n){for(var r=1,i=function(t,e,n){for(var r=1;e>0;t=t*t%n,e>>=1)1&e&&(r=r*t%n);return r}(10,n,e),s=0;s<300;s++){if(r===i)return s;r=10*r%e,i=10*i%e}return 0}(0,r,i),a=-1===this.s?"-":"";if(a+=n/r|0,n%=r,(n*=10)&&(a+="."),i){for(var o=s;o--;)a+=n/r|0,n%=r,n*=10;for(a+="(",o=i;o--;)a+=n/r|0,n%=r,n*=10;a+=")"}else for(o=t;n&&o--;)a+=n/r|0,n%=r,n*=10;return a}},void 0===(n=function(){return f}.apply(e,[]))||(t.exports=n)}()},748:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Multimap=e.Bimap=void 0,e.Bimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[Symbol.iterator]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>(this.delete(t),this.deleteValue(e),this.keyValueMap.set(t,e),this.valueKeyMap.set(e,t),this),this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);return this.keyValueMap.delete(t),this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&this.delete(this.valueKeyMap.get(t)),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Bimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}},e.Multimap=class{constructor(){this.keyValueMap=new Map,this.valueKeyMap=new Map,this[Symbol.iterator]=this.keyValueMap[Symbol.iterator],this.entries=()=>this.keyValueMap.entries(),this.keys=()=>this.keyValueMap.keys(),this.values=()=>this.keyValueMap.values(),this.get=t=>this.keyValueMap.get(t),this.getKey=t=>this.valueKeyMap.get(t),this.getValue=t=>this.get(t),this.set=(t,e)=>{this.delete(t),this.keyValueMap.set(t,e);const n=this.valueKeyMap.get(e)||[];return this.valueKeyMap.set(e,[...n,t]),this},this.setKey=(t,e)=>this.set(e,t),this.setValue=(t,e)=>this.set(t,e),this.clear=()=>{this.keyValueMap.clear(),this.valueKeyMap.clear()},this.delete=t=>{if(this.has(t)){const e=this.keyValueMap.get(t);this.keyValueMap.delete(t);const n=this.valueKeyMap.get(e).filter((e=>e!==t));return n.length>0?this.valueKeyMap.set(e,n):this.valueKeyMap.delete(e),!0}return!1},this.deleteKey=t=>this.delete(t),this.deleteValue=t=>!!this.hasValue(t)&&(this.valueKeyMap.get(t).forEach((t=>{this.delete(t)})),!0),this.forEach=(t,e)=>{this.keyValueMap.forEach(((n,r)=>{t.apply(e,[n,r,this])}))},this.has=t=>this.keyValueMap.has(t),this.hasKey=t=>this.has(t),this.hasValue=t=>this.valueKeyMap.has(t),this.inspect=()=>{let t="Multimap {",e=0;return this.forEach(((n,r)=>{e++,t+=r.toString()+" => "+n.toString(),e<this.size&&(t+=", ")})),t+="}",t}}get size(){return this.keyValueMap.size}}},500:(t,e)=>{"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),e.Helpers=void 0,(n=e.Helpers||(e.Helpers={})).escapeRegExp=function(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},n.primes=function(t){const e=[],n=[];for(let r=2;r<=t;++r)if(!e[r]){n.push(r);for(let n=r<<1;n<=t;n+=r)e[n]=!0}return n},n.flipFraction=function(t,e=!1){return e?t.abs().compare(1)<0?t.inverse():t:t.abs().compare(1)>0?t.inverse():t},n.binarySearch=function(t,e,n){let r=0,i=t.length-1;for(;r<=i;){const s=i+r>>1,a=n(e,t[s]);if(a>0)r=s+1;else{if(!(a<0))return s;i=s-1}}return~r},n.arrayEqual=function(t,e,n){return t.length===e.length&&t.every(((t,r)=>0===n(t,e[r])))},n.arrayUnique=function(t){return[...new Set(t)]},n.mod=function(t,e){return(t%e+e)%e}},635:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Interval=void 0;const r=n(628);class i{constructor(t){this.ratio=t}get cents(){return 1200*Math.log2(this.ratio.valueOf())}get savarts(){return 1e3*Math.log10(this.ratio.valueOf())}difference(t){return new i(this.ratio.div(t.ratio))}static fromRatio(t){return new i(new r.default(t))}static fromCents(t){return new i(new r.default(Math.pow(2,t/1200)))}static fromSavarts(t){return new i(new r.default(Math.pow(10,t/1e3)))}static compare(t,e){return t.ratio.compare(e.ratio)}static JND(){return i.fromCents(5)}}e.Interval=i},312:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningTone=e.Tuning=void 0;const r=n(628),i=n(500),s=n(635);class a{constructor(t,e=[]){this.intervals=t,this.annotations=e,this.intervals.sort(s.Interval.compare),1!=this.intervals[0].ratio.valueOf()&&(this.intervals=[new s.Interval(new r.default(1)),...this.intervals])}static fromIntervals(t,e=[]){return new a(t.map((t=>"string"==typeof t?new s.Interval(new r.default(t)):s.Interval.fromCents(t))),e)}get transposable(){if(void 0!==this._transposable)return this._transposable;const t=this.intervals[1].difference(this.intervals[0]);return this._transposable=this.intervals.slice(1).every(((e,n)=>{const r=e.difference(this.intervals[n]);return new s.Interval(i.Helpers.flipFraction(r.difference(t).ratio,!0)).ratio.compare(s.Interval.JND().ratio)<0}))}get steps(){return this.intervals.length-1}get octave(){return this.intervals[this.steps]}tune(t){return new s.Interval(this.intervals[t.pitchClass].ratio.mul(this.octave.ratio.pow(t.octave)))}nearest(t){const e=Math.floor(Math.log(t.ratio.valueOf())/Math.log(this.octave.ratio.valueOf())),n=new s.Interval(t.ratio.div(this.octave.ratio.pow(e))),a=i.Helpers.binarySearch(this.intervals,n,s.Interval.compare);if(a>=0)return{tone:new o(this,a,e),interval:t,difference:new s.Interval(new r.default(1))};{const r=~a,i=Math.abs(this.intervals[r-1].difference(n).cents),s=Math.abs(this.intervals[r].difference(n).cents),u=new o(this,i<s?r-1:r,e),h=this.tune(u);return{tone:u,interval:h,difference:h.difference(t)}}}static intervalsEdo(t){return Array.from(Array(t+1)).map(((e,n)=>s.Interval.fromCents(1200/t*n)))}}e.Tuning=a;class o{constructor(t,e,n){this.tuning=t,this.pitchClass=e,this.octave=n}get pitch(){return this.pitchClass+this.octave*this.tuning.steps}static fromPitch(t,e){return new o(t,i.Helpers.mod(e,t.steps),Math.floor(e/t.steps))}}e.TuningTone=o},913:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TuningNotation=void 0;const r=n(312),i=n(500),s=n(748);class a{constructor(t,e){this.tuning=t,this.map=e,this.regex=new RegExp("^("+Array.from(this.map.keys()).map(i.Helpers.escapeRegExp).join("|")+")(-?\\d)$","i")}static fromNotesAccidentalsCombination(t,e,n){const r=new s.Multimap;return Object.keys(e).forEach((s=>{r.set(""+s,e[s]),Object.keys(n).forEach((a=>{r.set(`${s}${a}`,i.Helpers.mod(e[s]+n[a],t.steps))}))})),new a(t,r)}name(t){return[...this.map.getKey(t.pitchClass)].map((e=>`${e}${t.octave}`))}parse(t){const e=this.regex.exec(t);if(!e)throw new Error("[TuningNotation.parse] Could not parse note "+t);return new r.TuningTone(this.tuning,this.map.get(e[1]),parseInt(e[2],10))}}e.TuningNotation=a},607:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(655);r.__exportStar(n(312),e),r.__exportStar(n(913),e),r.__exportStar(n(635),e)},655:(t,e,n)=>{"use strict";n.r(e),n.d(e,{__extends:()=>i,__assign:()=>s,__rest:()=>a,__decorate:()=>o,__param:()=>u,__metadata:()=>h,__awaiter:()=>l,__generator:()=>c,__createBinding:()=>f,__exportStar:()=>p,__values:()=>d,__read:()=>y,__spread:()=>v,__spreadArrays:()=>w,__await:()=>g,__asyncGenerator:()=>m,__asyncDelegator:()=>b,__asyncValues:()=>M,__makeTemplateObject:()=>_,__importStar:()=>N,__importDefault:()=>O,__classPrivateFieldGet:()=>k,__classPrivateFieldSet:()=>S});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var s=function(){return(s=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(t);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(t,r[i])&&(n[r[i]]=t[r[i]])}return n}function o(t,e,n,r){var i,s=arguments.length,a=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var o=t.length-1;o>=0;o--)(i=t[o])&&(a=(s<3?i(a):s>3?i(e,n,a):i(e,n))||a);return s>3&&a&&Object.defineProperty(e,n,a),a}function u(t,e){return function(n,r){e(n,r,t)}}function h(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))((function(i,s){function a(t){try{u(r.next(t))}catch(t){s(t)}}function o(t){try{u(r.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,i,s,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&s[0]?r.return:s[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,s[1])).done)return i;switch(r=0,i&&(s=[2&s[0],i.value]),s[0]){case 0:case 1:i=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,r=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!i||s[1]>i[0]&&s[1]<i[3])){a.label=s[1];break}if(6===s[0]&&a.label<i[1]){a.label=i[1],i=s;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(s);break}i[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],r=0}finally{n=i=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function f(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}function p(t,e){for(var n in t)"default"===n||e.hasOwnProperty(n)||(e[n]=t[n])}function d(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function y(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,s=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=s.next()).done;)a.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=s.return)&&n.call(s)}finally{if(i)throw i.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(y(arguments[e]));return t}function w(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var s=arguments[e],a=0,o=s.length;a<o;a++,i++)r[i]=s[a];return r}function g(t){return this instanceof g?(this.v=t,this):new g(t)}function m(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){s.push([t,e,n,r])>1||o(t,e)}))})}function o(t,e){try{(n=i[t](e)).value instanceof g?Promise.resolve(n.value.v).then(u,h):l(s[0][2],n)}catch(t){l(s[0][3],t)}var n}function u(t){o("next",t)}function h(t){o("throw",t)}function l(t,e){t(e),s.shift(),s.length&&o(s[0][0],s[0][1])}}function b(t){var e,n;return e={},r("next"),r("throw",(function(t){throw t})),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,i){e[r]=t[r]?function(e){return(n=!n)?{value:g(t[r](e)),done:"return"===r}:i?i(e):e}:i}}function M(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=d(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}function _(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function N(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function O(t){return t&&t.__esModule?t:{default:t}}function k(t,e){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return e.get(t)}function S(t,e,n){if(!e.has(t))throw new TypeError("attempted to set private field on non-instance");return e.set(t,n),n}}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}return n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,